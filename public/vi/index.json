[
{
	"uri": "http://localhost:1313/awsDeployment/vi/1-introduce/",
	"title": "Gi∆°ÃÅi thi√™Ã£u",
	"tags": [],
	"description": "",
	"content": "X·ª≠ l√Ω d·ªØ li·ªáu th·ªùi gian th·ª±c v·ªõi DynamoDB Streams v√† AWS Lambda l√† m·ªôt ki·∫øn tr√∫c serverless hi·ªán ƒë·∫°i, gi√∫p b·∫°n x√¢y d·ª±ng h·ªá th·ªëng ph·∫£n ·ª©ng nhanh v·ªõi c√°c thay ƒë·ªïi trong c∆° s·ªü d·ªØ li·ªáu m√† kh√¥ng c·∫ßn v·∫≠n h√†nh m√°y ch·ªß. M√¥ h√¨nh n√†y t·∫≠n d·ª•ng t·ªët kh·∫£ nƒÉng m·ªü r·ªông, t√≠nh s·∫µn s√†ng cao v√† ti·∫øt ki·ªám chi ph√≠ t·ª´ c√°c d·ªãch v·ª• AWS nh∆∞ DynamoDB, Lambda, v√† CloudWatch.\nKhi √°p d·ª•ng ki·∫øn tr√∫c n√†y, b·∫°n ƒë·∫°t ƒë∆∞·ª£c nhi·ªÅu l·ª£i √≠ch:\nX·ª≠ l√Ω th·ªùi gian th·ª±c: M·ªçi thay ƒë·ªïi (Insert, Update, Delete) trong b·∫£ng DynamoDB ƒë·ªÅu c√≥ th·ªÉ k√≠ch ho·∫°t Lambda ƒë·ªÉ x·ª≠ l√Ω ngay l·∫≠p t·ª©c, ph√π h·ª£p cho c√°c ·ª©ng d·ª•ng y√™u c·∫ßu ƒë·ªô tr·ªÖ th·∫•p nh∆∞ th·ªëng k√™, c·∫£nh b√°o, ƒë·ªìng b·ªô d·ªØ li·ªáu. Serverless \u0026amp; d·ªÖ tri·ªÉn khai: Kh√¥ng c·∫ßn qu·∫£n l√Ω m√°y ch·ªß. Ch·ªâ c·∫ßn c·∫•u h√¨nh trigger gi·ªØa DynamoDB v√† Lambda l√† c√≥ th·ªÉ tri·ªÉn khai pipeline x·ª≠ l√Ω s·ª± ki·ªán. Kh·∫£ nƒÉng m·ªü r·ªông linh ho·∫°t: Lambda t·ª± ƒë·ªông scale theo s·ªë l∆∞·ª£ng record t·ª´ stream. B·∫°n kh√¥ng c·∫ßn lo v·ªÅ over-provisioning ho·∫∑c under-provisioning nh∆∞ h·ªá th·ªëng truy·ªÅn th·ªëng. T√°ch bi·ªát logic x·ª≠ l√Ω: C√°c b∆∞·ªõc x·ª≠ l√Ω nh∆∞ l·ªçc, bi·∫øn ƒë·ªïi (transformation), t·ªïng h·ª£p (aggregation), g·ª≠i th√¥ng b√°o hay l∆∞u tr·ªØ th√™m v√†o S3/RDS c√≥ th·ªÉ ƒë∆∞·ª£c x·ª≠ l√Ω trong t·ª´ng Lambda ho·∫∑c chu·ªói c√°c Lambda k·∫øt h·ª£p v·ªõi EventBridge ho·∫∑c Step Functions. T·ªëi ∆∞u hi·ªáu su·∫•t: Nh·ªù v√†o k·ªπ thu·∫≠t batch processing, memory tuning v√† concurrent execution, h·ªá th·ªëng c√≥ th·ªÉ x·ª≠ l√Ω h√†ng ng√†n s·ª± ki·ªán m·ªói gi√¢y m√† v·∫´n ƒë·∫£m b·∫£o hi·ªáu nƒÉng. Gi√°m s√°t d·ªÖ d√†ng: T√≠ch h·ª£p CloudWatch ƒë·ªÉ theo d√µi log, thi·∫øt l·∫≠p dashboard, c·∫£nh b√°o l·ªói (error handling) v√† ph√¢n t√≠ch hi·ªáu su·∫•t chi ti·∫øt theo t·ª´ng giai ƒëo·∫°n x·ª≠ l√Ω. T·ªëi ∆∞u chi ph√≠: Ch·ªâ tr·∫£ ph√≠ theo s·ªë l·∫ßn th·ª±c thi Lambda v√† l∆∞u tr·ªØ DynamoDB. Khi k·∫øt h·ª£p th√™m provisioned throughput, b·∫°n c√≥ th·ªÉ gi·∫£m \u0026gt;30% chi ph√≠ so v·ªõi c√°c gi·∫£i ph√°p truy·ªÅn th·ªëng. D·ªÖ ki·ªÉm th·ª≠ v√† v·∫≠n h√†nh: C√≥ th·ªÉ m√¥ ph·ªèng c√°c lu·ªìng s·ª± ki·ªán ƒë·ªÉ ki·ªÉm th·ª≠, vi·∫øt unit test v√† thi·∫øt l·∫≠p c√°c quy tr√¨nh kh√¥i ph·ª•c s·ª± c·ªë (operational procedures) m·ªôt c√°ch b√†i b·∫£n. Th√¥ng qua vi·ªác k·∫øt h·ª£p DynamoDB Streams v√† AWS Lambda, ki·∫øn tr√∫c n√†y mang ƒë·∫øn m·ªôt gi·∫£i ph√°p m·∫°nh m·∫Ω, linh ho·∫°t, d·ªÖ m·ªü r·ªông v√† ƒë·∫∑c bi·ªát ph√π h·ª£p cho c√°c h·ªá th·ªëng x·ª≠ l√Ω d·ªØ li·ªáu real-time nh∆∞ h·ªá th·ªëng ph√¢n t√≠ch logs, tracking h√†nh vi ng∆∞·ªùi d√πng, h·ªá th·ªëng ph·∫£n h·ªìi t·ª©c th√¨ v√† nhi·ªÅu ·ª©ng d·ª•ng hi·ªán ƒë·∫°i kh√°c tr√™n n·ªÅn t·∫£ng ƒë√°m m√¢y AWS.\n"
},
{
	"uri": "http://localhost:1313/awsDeployment/vi/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "DynamoDB Triggers v√† Stream Processing v·ªõi Lambda T·ªïng th·ªÉ Trong d·ª± √°n n√†y, b·∫°n s·∫Ω t√¨m hi·ªÉu v√† tri·ªÉn khai m·ªôt h·ªá th·ªëng x·ª≠ l√Ω d·ªØ li·ªáu th·ªùi gian th·ª±c s·ª≠ d·ª•ng DynamoDB Streams v√† AWS Lambda. M·ªói khi c√≥ thay ƒë·ªïi trong b·∫£ng DynamoDB (insert, update, delete), s·ª± ki·ªán s·∫Ω ƒë∆∞·ª£c ghi nh·∫≠n v√†o stream v√† k√≠ch ho·∫°t h√†m Lambda ƒë·ªÉ x·ª≠ l√Ω ngay l·∫≠p t·ª©c. H·ªá th·ªëng th·ª±c hi·ªán c√°c thao t√°c bi·∫øn ƒë·ªïi d·ªØ li·ªáu (transformation), t·ªïng h·ª£p (aggregation), x·ª≠ l√Ω l·ªói (error handling) v√† ghi nh·∫≠n k·∫øt qu·∫£ v·ªÅ c√°c d·ªãch v·ª• nh∆∞ S3, RDS, ho·∫∑c g·ª≠i ƒë·∫øn h·ªá th·ªëng gi√°m s√°t.\nM·ª•c ti√™u ch√≠nh l√† x√¢y d·ª±ng m·ªôt ki·∫øn tr√∫c serverless ho√†n to√†n, ƒë·∫£m b·∫£o kh·∫£ nƒÉng m·ªü r·ªông t·ª± ƒë·ªông, hi·ªáu su·∫•t cao, t·ªëi ∆∞u chi ph√≠, v√† d·ªÖ d√†ng b·∫£o tr√¨. B·∫°n c≈©ng s·∫Ω tri·ªÉn khai c√°c k·ªπ thu·∫≠t nh∆∞ theo d√µi hi·ªáu su·∫•t (monitoring), thi·∫øt k·∫ø framework ki·ªÉm th·ª≠, v√† quy tr√¨nh v·∫≠n h√†nh l·ªói nh·∫±m ho√†n thi·ªán h·ªá th·ªëng x·ª≠ l√Ω lu·ªìng d·ªØ li·ªáu hi·ªán ƒë·∫°i v√† th·ª±c t·∫ø.\nN·ªôi dung Gi·ªõi thi·ªáu Y√™u c·∫ßu chu·∫©n b·ªã Bi·∫øn ƒë·ªïi Logic X·ª≠ l√Ω l·ªói D·ªçn d·∫πp t√†i nguy√™n "
},
{
	"uri": "http://localhost:1313/awsDeployment/vi/2-prerequiste/2.1-create-iam-role/",
	"title": "T·∫°o IAM Role cho AWS Lambda",
	"tags": [],
	"description": "",
	"content": "Ph·∫ßn n√†y h∆∞·ªõng d·∫´n c√°c b∆∞·ªõc ƒë·ªÉ t·∫°o m·ªôt IAM Role cho ki·∫øn tr√∫c ƒë∆∞·ª£c m√¥ t·∫£ trong s∆° ƒë·ªì. IAM Role n√†y s·∫Ω cho ph√©p Lambda function c√≥ quy·ªÅn ƒë·ªçc DynamoDB Stream v√† ghi log ra CloudWatch.\nT·ªïng quan ki·∫øn tr√∫c sau khi b·∫°n ho√†n th√†nh b∆∞·ªõc n√†y s·∫Ω nh∆∞ sau:\nT·∫°o vai tr√≤ IAM ƒêi t·ªõi T·∫°o vai tr√≤ Iam Nh·∫•p v√†o Iam. Nh·∫•p v√†o T·∫°o vai tr√≤. Nh·∫•p v√†o D·ªãch v·ª• AWS, sau ƒë√≥ Nh·∫•p v√†o Lambda ƒë·ªÉ x√°c nh·∫≠n. ƒêi t·ªõi Th√™m quy·ªÅn Nh·∫•p v√†o AWSLambdaBasicExecutionRole. Nh·∫•p v√†o AmazonDynamoDBFullAccess. ƒêi t·ªõi [Ti·∫øp theo]\nƒêi t·ªõi T√™n, ƒë√°nh gi√° v√† t·∫°o\nT√™n data-streaming-system-role.. B·∫•m v√†o T·∫°o vai tr√≤ N·ªôi dung Create DynamoDB "
},
{
	"uri": "http://localhost:1313/awsDeployment/vi/3-transformation-logic/3.1-create-s3-uploadimage/",
	"title": "X·ª≠ l√Ω d·ªØ li·ªáu trong Lambda ",
	"tags": [],
	"description": "",
	"content": "Trong m·ªôt h·ªá th·ªëng x·ª≠ l√Ω th·ªùi gian th·ª±c, vi·ªác ti·∫øp nh·∫≠n v√† chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ lu·ªìng s·ª± ki·ªán (stream) l√† b∆∞·ªõc quan tr·ªçng nh·∫±m ƒë·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c ph√¢n t√≠ch v√† s·ª≠ d·ª•ng ƒë√∫ng m·ª•c ƒë√≠ch. AWS DynamoDB Stream cho ph√©p theo d√µi m·ªçi thay ƒë·ªïi trong b·∫£ng d·ªØ li·ªáu, v√† AWS Lambda ƒë√≥ng vai tr√≤ l√† \u0026ldquo;ng∆∞·ªùi nghe\u0026rdquo; (listener) th·ª±c hi·ªán x·ª≠ l√Ω ngay khi c√≥ thay ƒë·ªïi x·∫£y ra.\nTrong ph·∫ßn n√†y, ta s·∫Ω hi·ªán th·ª±c h√≥a transformation logic ‚Äì logic bi·∫øn ƒë·ªïi d·ªØ li·ªáu ‚Äì trong Lambda function. D·ªØ li·ªáu t·ª´ DynamoDB Stream s·∫Ω ƒë∆∞·ª£c truy xu·∫•t, gi·∫£i m√£ v√† bi·∫øn ƒë·ªïi theo y√™u c·∫ßu nghi·ªáp v·ª• c·ª• th·ªÉ, gi√∫p t·∫°o ti·ªÅn ƒë·ªÅ cho c√°c b∆∞·ªõc x·ª≠ l√Ω ti·∫øp theo nh∆∞ t·ªïng h·ª£p, l∆∞u tr·ªØ, ph√¢n t√≠ch ho·∫∑c g·ª≠i ƒëi c√°c h·ªá th·ªëng kh√°c.\nƒêi t·ªõi Lambda Function ƒë√£ t·∫°o: Ch·ªçn function b·∫°n ƒë√£ t·∫°o, v√≠ d·ª•: DynamoStreamProcessor K√©o xu·ªëng ph·∫ßn Code source G√°n ƒëo·∫°n code v√†o nh∆∞ sau: export const handler = async (event) =\u0026gt; { for (const record of event.Records) { console.log(\u0026#39;Event Name:\u0026#39;, record.eventName); const newImage = record.dynamodb?.NewImage; if (newImage) { const orderId = newImage.OrderID?.S; const product = newImage.Product?.S; const quantity = newImage.Quantity?.N; console.log(`New Order Received - ID: ${orderId}, Product: ${product}, Quantity: ${quantity}`); // V√≠ d·ª• transform: t√≠nh gi√° tr·ªã ƒë∆°n h√†ng (gi·∫£ ƒë·ªãnh gi√° m·ªói m√≥n l√† 10) const transformed = { orderId, product, totalCost: Number(quantity) * 10, }; console.log(\u0026#39;Transformed Order:\u0026#39;, transformed); } } return { statusCode: 200, body: \u0026#39;Stream processed successfully\u0026#39; }; }; Gi·∫£i th√≠ch: event.Records: L√† danh s√°ch c√°c s·ª± ki·ªán t·ª´ DynamoDB (m·ªói l·∫ßn thay ƒë·ªïi c√≥ th·ªÉ g·ª≠i nhi·ªÅu record).\nrecord.eventName: X√°c ƒë·ªãnh lo·∫°i thay ƒë·ªïi (INSERT, MODIFY, REMOVE).\nrecord.dynamodb.NewImage: D·ªØ li·ªáu m·ªõi sau khi thay ƒë·ªïi.\nBi·∫øn transformed: L√† n∆°i b·∫°n th·ª±c hi·ªán logic bi·∫øn ƒë·ªïi d·ªØ li·ªáu.\nKi·ªÉm Th·ª≠ D·ªØ Li·ªáu ƒê·ªÉ x√°c nh·∫≠n r·∫±ng Lambda ho·∫°t ƒë·ªông ƒë√∫ng logic b·∫°n ƒë√£ vi·∫øt, ta s·∫Ω th·ª≠ t·∫°o d·ªØ li·ªáu m·ªõi v√†o b·∫£ng DynamoDB v√† xem Lambda c√≥ k√≠ch ho·∫°t kh√¥ng.\nT·∫°o b·∫£n ghi m·ªõi trong b·∫£ng DynamoDB V√†o AWS Console ‚Üí DynamoDB ‚Üí ch·ªçn b·∫£ng b·∫°n ƒë√£ t·∫°o (OrdersTable) Ch·ªçn Explore table items Ch·ªçn Create item Ch·ªçn JSON view\nTh√™m b·∫£n ghi m·ªõi\nCh·ªçn Create item Ki·ªÉm tra k·∫øt qu·∫£ th·ª±c thi c·ªßa Lambda V√†o AWS Console \u0026gt; CloudWatch\nCh·ªçn menu b√™n tr√°i: Logs ‚Üí Log groups\nT√¨m log group theo t√™n h√†m Lambda: /aws/lambda/DynamoStreamProcessor\nNh·∫•n v√†o log group ƒë√≥. Ch·ªçn log stream c√≥ th·ªùi gian g·∫ßn nh·∫•t ‚Äì t∆∞∆°ng ·ª©ng v·ªõi l·∫ßn b·∫°n t·∫°o item trong DynamoDB. B·∫°n s·∫Ω th·∫•y nhi·ªÅu d√≤ng log t∆∞∆°ng t·ª± sau: √ù nghƒ©a:\nüì• Event Name: Cho bi·∫øt ƒë√¢y l√† thao t√°c INSERT, MODIFY, hay REMOVE\nüü¢ New Order Received: ƒê√£ ƒë·ªçc ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ DynamoDB stream\nüîÅ Transformed Order: ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng theo logic b·∫°n vi·∫øt trong Lambda\nREPORT: T·ªïng th·ªùi gian x·ª≠ l√Ω, b·ªô nh·ªõ d√πng, v.v.\n"
},
{
	"uri": "http://localhost:1313/awsDeployment/vi/4-error-handling/4.1-exception-handling-in-lambda/",
	"title": "X·ª≠ l√Ω ngo·∫°i l·ªá trong Lambda",
	"tags": [],
	"description": "",
	"content": "Trong c√°c h√†m Lambda x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ DynamoDB Stream, vi·ªác ph√°t sinh l·ªói l√† ƒëi·ªÅu kh√¥ng th·ªÉ tr√°nh kh·ªèi, ƒë·∫∑c bi·ªát khi d·ªØ li·ªáu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng, thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc ho·∫∑c g·∫∑p s·ª± c·ªë khi k·∫øt n·ªëi v·ªõi d·ªãch v·ª• kh√°c. N·∫øu kh√¥ng x·ª≠ l√Ω ngo·∫°i l·ªá ƒë√∫ng c√°ch, to√†n b·ªô ti·∫øn tr√¨nh c√≥ th·ªÉ b·ªã d·ª´ng ho·∫∑c l·∫∑p l·∫°i nhi·ªÅu l·∫ßn kh√¥ng c·∫ßn thi·∫øt.\nM·ªôt s·ªë nguy√™n t·∫Øc x·ª≠ l√Ω ngo·∫°i l·ªá trong Lambda:\nBao b·ªçc logic b·∫±ng try\u0026hellip;catch (Node.js) ho·∫∑c try\u0026hellip;except (Python) ƒë·ªÉ b·∫Øt c√°c l·ªói runtime.\nGhi log chi ti·∫øt l·ªói ƒë·ªÉ h·ªó tr·ª£ debug.\nKh√¥ng nu·ªët l·ªói ho√†n to√†n ‚Äî c·∫ßn tr·∫£ v·ªÅ th√¥ng tin ho·∫∑c throw ti·∫øp ƒë·ªÉ h·ªá th·ªëng c√≥ th·ªÉ retry n·∫øu c·∫ßn.\nPh√¢n lo·∫°i l·ªói: l·ªói t·∫°m th·ªùi (temporary error) c√≥ th·ªÉ retry, l·ªói d·ªØ li·ªáu (permanent error) th√¨ n√™n ƒë∆∞a v√†o Dead Letter Queue ƒë·ªÉ x·ª≠ l√Ω th·ªß c√¥ng.\nV√≠ d·ª• v·ªõi Node.js:\nexport const handler = async (event) =\u0026gt; { for (const record of event.Records) { try { console.log(\u0026#39;Event Name:\u0026#39;, record.eventName); const newImage = record.dynamodb?.NewImage; if (!newImage) { throw new Error(\u0026#34;Missing NewImage in record\u0026#34;); } const orderId = newImage.OrderID?.S; const product = newImage.Product?.S; const quantity = parseInt(newImage.Quantity?.N); if (!orderId || !product || isNaN(quantity)) { throw new Error(`Invalid data: ${JSON.stringify(newImage)}`); } const transformed = { orderId, product, totalCost: quantity * 10, }; console.log(\u0026#39;Transformed Order:\u0026#39;, transformed); // Ghi d·ªØ li·ªáu v√†o b·∫£ng kh√°c ho·∫∑c g·ª≠i ƒëi h·ªá th·ªëng kh√°c... } catch (err) { console.error(\u0026#34;Error processing record:\u0026#34;, err); // C√≥ th·ªÉ g·ª≠i d·ªØ li·ªáu l·ªói v√†o DLQ ho·∫∑c service kh√°c ƒë·ªÉ x·ª≠ l√Ω sau } } return { statusCode: 200, body: \u0026#39;Processing completed\u0026#39; }; }; L∆∞u √Ω:\nconsole.error() s·∫Ω ghi log d∆∞·ªõi d·∫°ng l·ªói trong CloudWatch, gi√∫p d·ªÖ d√†ng l·ªçc v√† ph√¢n t√≠ch.\nN·∫øu mu·ªën Lambda t·ª± ƒë·ªông retry, c√≥ th·ªÉ throw l·∫°i l·ªói thay v√¨ nu·ªët trong catch.\nƒê·ªëi v·ªõi d·ªØ li·ªáu l·ªói vƒ©nh vi·ªÖn (permanent error), n√™n c·∫•u h√¨nh DLQ ƒë·ªÉ l∆∞u tr·ªØ v√† x·ª≠ l√Ω th·ªß c√¥ng.\n"
},
{
	"uri": "http://localhost:1313/awsDeployment/vi/2-prerequiste/",
	"title": "Chu·∫©n B·ªã",
	"tags": [],
	"description": "",
	"content": "ƒê·ªÉ tri·ªÉn khai h·ªá th·ªëng x·ª≠ l√Ω d·ªØ li·ªáu th·ªùi gian th·ª±c s·ª≠ d·ª•ng DynamoDB Triggers v√† AWS Lambda, b·∫°n c·∫ßn th·ª±c hi·ªán m·ªôt s·ªë b∆∞·ªõc chu·∫©n b·ªã quan tr·ªçng nh·∫±m ƒë·∫£m b·∫£o quy·ªÅn truy c·∫≠p v√† m√¥i tr∆∞·ªùng tri·ªÉn khai ph√π h·ª£p tr√™n AWS. Trong ph·∫ßn chu·∫©n b·ªã n√†y, ch√∫ng ta s·∫Ω ti·∫øn h√†nh t·∫°o IAM Role ƒë·ªÉ c·∫•p quy·ªÅn cho Lambda c√≥ th·ªÉ truy c·∫≠p ƒë∆∞·ª£c v√†o c√°c d·ªãch v·ª• c·∫ßn thi·∫øt nh∆∞ DynamoDB, CloudWatch Logs, c≈©ng nh∆∞ c√°c d·ªãch v·ª• kh√°c ph·ª•c v·ª• m·ª•c ƒë√≠ch x·ª≠ l√Ω, l∆∞u tr·ªØ v√† gi√°m s√°t d·ªØ li·ªáu. Sau khi c·∫•u h√¨nh IAM xong, ch√∫ng ta s·∫Ω ti·∫øp t·ª•c t·∫°o b·∫£ng DynamoDB v√† x√¢y d·ª±ng h·ªá th·ªëng streaming trigger b·∫±ng Lambda.\nN·ªôi Dung T·∫°o IAM Role T·∫°o DynamoDB Table v√† b·∫≠t DynamoDB Stream T·∫°o Lambda v√† g·∫Øn v·ªõi DynamoDB Stream "
},
{
	"uri": "http://localhost:1313/awsDeployment/vi/4-error-handling/4.2-log-errors-with-cloudwatch/",
	"title": "Ghi Log l·ªói v·ªõi CloudWatch",
	"tags": [],
	"description": "",
	"content": "Khi h·ªá th·ªëng g·∫∑p l·ªói, vi·ªác ghi l·∫°i th√¥ng tin chi ti·∫øt c·ªßa l·ªói l√† b∆∞·ªõc quan tr·ªçng ƒë·ªÉ h·ªó tr·ª£ ph√¢n t√≠ch nguy√™n nh√¢n v√† kh·∫Øc ph·ª•c s·ª± c·ªë. AWS CloudWatch l√† d·ªãch v·ª• gi√°m s√°t v√† thu th·∫≠p log m·∫∑c ƒë·ªãnh cho Lambda, gi√∫p b·∫°n d·ªÖ d√†ng theo d√µi to√†n b·ªô qu√° tr√¨nh x·ª≠ l√Ω, bao g·ªìm c·∫£ khi x·∫£y ra l·ªói.\nC√°ch Ghi Log L·ªói Trong m√£ ngu·ªìn Lambda, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng:\nconsole.error() ƒë·ªÉ ghi log l·ªói.\nconsole.warn() ƒë·ªÉ c·∫£nh b√°o.\nconsole.log() cho th√¥ng tin chung.\nV√≠ d·ª•:\ntry { // Logic x·ª≠ l√Ω d·ªØ li·ªáu } catch (error) { console.error(\u0026#34;‚ùå Error processing record:\u0026#34;, error); console.error(\u0026#34;üìÑ Stack trace:\u0026#34;, error.stack); } Theo d√µi log tr√™n CloudWatch\nM·ªü AWS Management Console.\nCh·ªçn CloudWatch ‚Üí Log groups.\nT√¨m log group theo t√™n h√†m Lambda, v√≠ d·ª•: /aws/lambda/DynamoStreamProcessor.\nCh·ªçn log stream m·ªõi nh·∫•t ƒë·ªÉ xem chi ti·∫øt l·ªói.\n√ù nghƒ©a c·ªßa vi·ªác ghi log l·ªói\nPh√¢n t√≠ch nhanh nguy√™n nh√¢n s·ª± c·ªë: X√°c ƒë·ªãnh l·ªói thu·ªôc v·ªÅ d·ªØ li·ªáu ƒë·∫ßu v√†o, k·∫øt n·ªëi d·ªãch v·ª• hay logic x·ª≠ l√Ω.\nTheo d√µi t·∫ßn su·∫•t l·ªói: X√°c ƒë·ªãnh xem l·ªói x·∫£y ra l·∫ª t·∫ª hay li√™n t·ª•c.\nH·ªó tr·ª£ c·∫£nh b√°o t·ª± ƒë·ªông: C√≥ th·ªÉ k·∫øt h·ª£p CloudWatch Alarm ƒë·ªÉ g·ª≠i email/SMS khi xu·∫•t hi·ªán s·ªë l∆∞·ª£ng l·ªói v∆∞·ª£t ng∆∞·ª°ng.\n"
},
{
	"uri": "http://localhost:1313/awsDeployment/vi/2-prerequiste/2.2-create-dynamo/",
	"title": "T·∫°o DynamoDB Table v√† B·∫≠t DynamoDB Stream",
	"tags": [],
	"description": "",
	"content": "T·∫°o DynamoDB ƒê·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu theo th·ªùi gian th·ª±c(real-time) trong h·ªá th·ªëng Serverless, ch√∫ng ta c·∫ßn m·ªôt c∆° ch·∫ø ƒë·ªÉ l·∫Øng nghe c√°c thay ƒë·ªïi x·∫£y ra trong c∆° s·ªü d·ªØ li·ªáu. DynamoDB Stream ch√≠nh l√† c√¥ng c·ª• h·ªó tr·ª£ cho m·ª•c ti√™u ƒë√≥. ·ªû b∆∞·ªõc n√†y, ch√∫ng ta s·∫Ω t·∫°o m·ªôt b·∫£ng DynamoDB ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu v√† b·∫≠t t√≠nh nƒÉng Stream, nh·∫±m cho ph√©p c√°c d·ªãch v·ª• nh∆∞ AWS Lambda t·ª± ƒë·ªông k√≠ch ho·∫°t m·ªói khi c√≥ thay ƒë·ªïi (th√™m, s·ª≠a, x√≥a) trong b·∫£ng.\nVi·ªác b·∫≠t DynamoDB Stream s·∫Ω gi√∫p b·∫°n x√¢y d·ª±ng m·ªôt lu·ªìng x·ª≠ l√Ω d·ªØ li·ªáu realtime m·∫°nh m·∫Ω, ch·∫≥ng h·∫°n nh∆∞ ghi log, ƒë·ªìng b·ªô d·ªØ li·ªáu, t√≠nh to√°n th·ªëng k√™ ho·∫∑c chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu sang h·ªá th·ªëng kh√°c. ƒê√¢y l√† n·ªÅn t·∫£ng quan tr·ªçng trong ki·∫øn tr√∫c h∆∞·ªõng s·ª± ki·ªán (event-driven architecture).\nƒêi t·ªõi DynamoDB Nh·∫•p v√†o DynamoDB. Nh·∫•p v√†o Tables, sau ƒë√≥ Nh·∫•p v√†o Create table Trong t·∫°o b·∫£ng: ƒê·∫∑t t√™n b·∫£ng OrdersTable ƒê·∫∑t t√™n Partition key : OrderID Ch·ªçn Customize settings Sau ƒë√≥ ch·ªçn Create table B·∫≠t DynamoDB Stream Nh·∫•p v√†o Table v·ª´a t·∫°o Ch·ªçn Exports and Streams T·∫°i DynamoDB stream details, Ch·ªçn Turn on Ch·ªçn New and old images\nNh·∫•p v√†o Turn on stream "
},
{
	"uri": "http://localhost:1313/awsDeployment/vi/3-transformation-logic/3.2-create-rds/",
	"title": "T·ªïng h·ª£p d·ªØ li·ªáu",
	"tags": [],
	"description": "",
	"content": "Trong c√°c h·ªá th·ªëng x·ª≠ l√Ω d·ªØ li·ªáu th·ªùi gian th·ª±c, vi·ªác ch·ªâ ghi nh·∫≠n t·ª´ng s·ª± ki·ªán ri√™ng l·∫ª l√† ch∆∞a ƒë·ªß. M·ªôt y√™u c·∫ßu ph·ªï bi·∫øn trong th·ª±c t·∫ø l√† c·∫ßn ph·∫£i t·ªïng h·ª£p d·ªØ li·ªáu nh·∫±m cung c·∫•p th√¥ng tin mang t√≠nh kh√°i qu√°t, h·ªó tr·ª£ cho vi·ªác ph√¢n t√≠ch v√† ra quy·∫øt ƒë·ªãnh nhanh ch√≥ng.\nV·ªõi ƒë·ªÅ t√†i n√†y, m·ªói khi c√≥ m·ªôt ƒë∆°n h√†ng m·ªõi ƒë∆∞·ª£c ghi nh·∫≠n v√†o b·∫£ng OrdersTable, h·ªá th·ªëng kh√¥ng ch·ªâ x·ª≠ l√Ω s·ª± ki·ªán ƒë√≥ m√† c√≤n c·∫≠p nh·∫≠t t·ªïng s·ªë l∆∞·ª£ng c·ªßa t·ª´ng s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t. ƒêi·ªÅu n√†y mang l·∫°i c√°i nh√¨n tr·ª±c quan h∆°n v·ªÅ xu h∆∞·ªõng ti√™u d√πng theo th·ªùi gian th·ª±c m√† kh√¥ng c·∫ßn ch·∫°y batch job v√†o cu·ªëi ng√†y nh∆∞ c√°c h·ªá th·ªëng truy·ªÅn th·ªëng.\nƒê·ªÉ hi·ªán th·ª±c ƒëi·ªÅu n√†y, ta tri·ªÉn khai thu·∫≠t to√°n t·ªïng h·ª£p ngay b√™n trong h√†m Lambda b·∫±ng c√°ch s·ª≠ d·ª•ng DynamoDB UpdateItem v·ªõi bi·ªÉu th·ª©c ADD, ƒë·∫£m b·∫£o hi·ªáu nƒÉng v√† t√≠nh nh·∫•t qu√°n cao. M·ªçi thay ƒë·ªïi ƒë·ªÅu ƒë∆∞·ª£c ghi nh·∫≠n t·ª©c th√¨, ph√π h·ª£p v·ªõi ƒë·∫∑c tr∆∞ng c·ªßa c√°c h·ªá th·ªëng serverless event-driven hi·ªán ƒë·∫°i.\nT·∫°o b·∫£ng t·ªïng h·ª£p m·ªõi T·∫°o b·∫£ng.\nTruy c·∫≠p DynamoDB \u0026gt; Tables \u0026gt; Create Table Nh·∫≠p th√¥ng tin:\nTable name: AggregateTable\nPartition key: product (ki·ªÉu String)\nB·∫•m Create Table\nC·∫≠p nh·∫≠t Lambda ƒë·ªÉ ghi d·ªØ li·ªáu v√†o b·∫£ng M·ªü l·∫°i h√†m Lambda ƒë√£ x·ª≠ l√Ω stream. Th√™m quy·ªÅn ghi v√†o AggregateTable: V√†o Configuration \u0026gt; Permissions \u0026gt; Rolename (VD: LambdaDynamoDBStreamRole) Trong trang IAM Role, ch·ªçn Add permissions \u0026gt; Attach policies G√°n quy·ªÅn AmazonDynamoDBFullAccess (ho·∫∑c custom policy ch·ªâ cho ph√©p PutItem, UpdateItem tr√™n b·∫£ng AggregateTable)\nSau ƒë√≥ quay l·∫°i Lambda functions c·∫≠p nh·∫≠t l·∫°i ƒëo·∫°n code nh∆∞ sau:\nimport { DynamoDBClient, UpdateItemCommand } from \u0026#34;@aws-sdk/client-dynamodb\u0026#34;; const client = new DynamoDBClient({}); export const handler = async (event) =\u0026gt; { for (const record of event.Records) { console.log(\u0026#34;üì• Event Name:\u0026#34;, record.eventName); const newImage = record.dynamodb?.NewImage; if (!newImage) continue; const orderId = newImage.OrderID?.S || \u0026#34;unknown\u0026#34;; const product = newImage.Product?.S || \u0026#34;unknown\u0026#34;; const quantity = parseInt(newImage.Quantity?.N || \u0026#34;0\u0026#34;); console.log(`üõí New Order Received - ID: ${orderId}, Product: ${product}, Quantity: ${quantity}`); const transformedOrder = { orderId, product, quantity }; console.log(\u0026#34;üîÅ Transformed Order:\u0026#34;, transformedOrder); const params = { TableName: \u0026#34;AggregateTable\u0026#34;, Key: { Product: { S: product } }, UpdateExpression: \u0026#34;SET totalQuantity = if_not_exists(totalQuantity, :zero) + :qty\u0026#34;, ExpressionAttributeValues: { \u0026#34;:qty\u0026#34;: { N: quantity.toString() }, \u0026#34;:zero\u0026#34;: { N: \u0026#34;0\u0026#34; } }, ReturnValues: \u0026#34;UPDATED_NEW\u0026#34; }; try { const result = await client.send(new UpdateItemCommand(params)); const newTotal = result.Attributes?.totalQuantity?.N; console.log(`üìä T·ªïng s·ªë l∆∞·ª£ng sau c·ªông d·ªìn: ${newTotal}`); console.log(`‚úÖ C·ªông d·ªìn th√†nh c√¥ng v√†o AggregateTable cho s·∫£n ph·∫©m ${product}`); } catch (err) { console.error(\u0026#34;‚ùå L·ªói khi c·∫≠p nh·∫≠t AggregateTable:\u0026#34;, err); } } return { statusCode: 200, body: \u0026#34;OK\u0026#34; }; }; Ki·ªÉm tra ho·∫°t ƒë·ªông V√†o OrdersTable \u0026gt; Items \u0026gt; Create Item\nT·∫°o item m·ªõi v·ªõi OrderID, Product, Quantity\nCh·ªçn JSON view { \u0026#34;OrderID\u0026#34;: { \u0026#34;S\u0026#34;: \u0026#34;order-1\u0026#34; }, \u0026#34;Product\u0026#34;: { \u0026#34;S\u0026#34;: \u0026#34;Notebook\u0026#34; }, \u0026#34;Quantity\u0026#34;: { \u0026#34;N\u0026#34;: \u0026#34;5\u0026#34; } } Ch·ªù 1-2s ‚Üí M·ªü AggregateTable, ch·ªçn Scan \u0026gt; Run Ki·ªÉm tra c·ªôt totalQuantity ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ch√≠nh x√°c theo Product "
},
{
	"uri": "http://localhost:1313/awsDeployment/vi/3-transformation-logic/3.3-log-and-monitor-with-cloudwatch/",
	"title": "Ghi log v√† gi√°m s√°t x·ª≠ l√Ω v·ªõi CloudWatch",
	"tags": [],
	"description": "",
	"content": "Trong qu√° tr√¨nh v·∫≠n h√†nh h·ªá th·ªëng, vi·ªác ghi log ƒë√≥ng vai tr√≤ quan tr·ªçng ƒë·ªÉ theo d√µi, ph√¢n t√≠ch v√† x·ª≠ l√Ω s·ª± c·ªë. AWS cung c·∫•p d·ªãch v·ª• Amazon CloudWatch cho ph√©p thu th·∫≠p, l∆∞u tr·ªØ v√† gi√°m s√°t log t·ª´ c√°c d·ªãch v·ª• kh√°c nh∆∞ AWS Lambda, DynamoDB, v.v.\nKhi Lambda th·ª±c hi·ªán x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ DynamoDB Stream, to√†n b·ªô th√¥ng tin ƒë∆∞·ª£c l·∫≠p tr√¨nh ƒë·ªÉ ghi log l·∫°i th√¥ng qua c√°c l·ªánh console.log() (ho·∫∑c t∆∞∆°ng ƒë∆∞∆°ng) trong m√£ ngu·ªìn. C√°c log n√†y bao g·ªìm:\nTh√¥ng tin s·ª± ki·ªán nh·∫≠n ƒë∆∞·ª£c (Event Name, ID ƒë∆°n h√†ng, s·∫£n ph·∫©m, s·ªë l∆∞·ª£ng, v.v.)\nD·ªØ li·ªáu sau khi ƒë√£ bi·∫øn ƒë·ªïi (Transformed Order).\nTh·ªùi gian b·∫Øt ƒë·∫ßu, k·∫øt th√∫c x·ª≠ l√Ω v√† th√¥ng tin hi·ªáu su·∫•t (th·ªùi gian ch·∫°y, dung l∆∞·ª£ng b·ªô nh·ªõ s·ª≠ d·ª•ng).\nMinh ch·ª©ng log hi·ªÉn th·ªã tr√™n CloudWatch nh∆∞ h√¨nh d∆∞·ªõi:\nVi·ªác ghi log gi√∫p:\nTheo d√µi qu√° tr√¨nh x·ª≠ l√Ω c·ªßa Lambda theo th·ªùi gian th·ª±c.\nPh√¢n t√≠ch l·ªói nhanh ch√≥ng khi c√≥ s·ª± c·ªë.\nƒê√°nh gi√° hi·ªáu nƒÉng c·ªßa h√†m Lambda v√† t·ªëi ∆∞u chi ph√≠ v·∫≠n h√†nh.\nNh·ªù CloudWatch, nh√≥m c√≥ th·ªÉ ƒë·∫£m b·∫£o h·ªá th·ªëng x·ª≠ l√Ω d·ªØ li·ªáu ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh, minh b·∫°ch v√† d·ªÖ b·∫£o tr√¨.\n"
},
{
	"uri": "http://localhost:1313/awsDeployment/vi/3-transformation-logic/",
	"title": "Logic bi·∫øn ƒë·ªïi d·ªØ li·ªáu",
	"tags": [],
	"description": "",
	"content": "Trong m·ªôt h·ªá th·ªëng x·ª≠ l√Ω d·ªØ li·ªáu th·ªùi gian th·ª±c, vi·ªác ti·∫øp nh·∫≠n d·ªØ li·ªáu t·ª´ ngu·ªìn (nh∆∞ DynamoDB Stream) m·ªõi ch·ªâ l√† b∆∞·ªõc kh·ªüi ƒë·∫ßu. ƒê·ªÉ t·∫°o ra gi√° tr·ªã t·ª´ d√≤ng d·ªØ li·ªáu n√†y, ch√∫ng ta c·∫ßn th·ª±c hi·ªán qu√° tr√¨nh chuy·ªÉn ƒë·ªïi (transformation) ‚Äì bi·∫øn ƒë·ªïi d·ªØ li·ªáu th√¥ th√†nh ƒë·ªãnh d·∫°ng ph√π h·ª£p v·ªõi m·ª•c ƒë√≠ch x·ª≠ l√Ω, l∆∞u tr·ªØ ho·∫∑c hi·ªÉn th·ªã.\nLambda function ch√≠nh l√† n∆°i ƒë·∫£m nh·∫≠n vai tr√≤ n√†y. M·ªói khi c√≥ thay ƒë·ªïi tr√™n b·∫£ng DynamoDB, m·ªôt b·∫£n ghi s·ª± ki·ªán s·∫Ω ƒë∆∞·ª£c g·ª≠i v√†o h√†m Lambda. T·∫°i ƒë√¢y, d·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c tr√≠ch xu·∫•t, ph√¢n t√≠ch v√† x·ª≠ l√Ω theo logic nghi·ªáp v·ª• c·ª• th·ªÉ. ƒê√¢y l√† b∆∞·ªõc then ch·ªët gi√∫p h·ªá th·ªëng tr·ªü n√™n th√¥ng minh, linh ho·∫°t v√† c√≥ th·ªÉ m·ªü r·ªông trong c√°c t√¨nh hu·ªëng th·ª±c t·∫ø.\nN·ªôi dung X·ª≠ l√Ω d·ªØ li·ªáu trong Lambda T·ªïng h·ª£p d·ªØ li·ªáu Ghi log v√† gi√°m s√°t x·ª≠ l√Ω v·ªõi CloudWatch "
},
{
	"uri": "http://localhost:1313/awsDeployment/vi/4-error-handling/4.3-dead-letter-queue/",
	"title": "S·ª≠ d·ª•ng Dead Letter Queue (DLQ) ƒë·ªÉ l∆∞u l·ªói",
	"tags": [],
	"description": "",
	"content": "Trong c√°c h·ªá th·ªëng x·ª≠ l√Ω d·ªØ li·ªáu th·ªùi gian th·ª±c, khi Lambda g·∫∑p l·ªói li√™n t·ª•c (v√≠ d·ª• d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c d·ªãch v·ª• ƒë√≠ch kh√¥ng kh·∫£ d·ª•ng), n·∫øu kh√¥ng x·ª≠ l√Ω kh√©o, d·ªØ li·ªáu l·ªói s·∫Ω b·ªã m·∫•t ho·∫∑c l√†m ngh·∫Ωn to√†n b·ªô lu·ªìng x·ª≠ l√Ω. AWS h·ªó tr·ª£ Dead Letter Queue (DLQ) ƒë·ªÉ l∆∞u tr·ªØ nh·ªØng s·ª± ki·ªán kh√¥ng x·ª≠ l√Ω th√†nh c√¥ng, gi√∫p b·∫°n ph√¢n t√≠ch v√† x·ª≠ l√Ω l·∫°i sau.\nNguy√™n l√Ω ho·∫°t ƒë·ªông Khi Lambda kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c s·ª± ki·ªán sau s·ªë l·∫ßn retry t·ªëi ƒëa, s·ª± ki·ªán ƒë√≥ s·∫Ω ƒë∆∞·ª£c g·ª≠i v√†o DLQ (th∆∞·ªùng l√† SQS ho·∫∑c SNS).\nDLQ gi√∫p t√°ch d·ªØ li·ªáu l·ªói ra kh·ªèi lu·ªìng ch√≠nh, tr√°nh ·∫£nh h∆∞·ªüng t·ªõi c√°c s·ª± ki·ªán h·ª£p l·ªá.\nC√°ch c·∫•u h√¨nh DLQ cho Lambda M·ªü AWS Lambda Console ‚Üí ch·ªçn function c·∫ßn c·∫•u h√¨nh.\nChuy·ªÉn ƒë·∫øn tab Configuration ‚Üí Asynchronous invocation.\n·ªû ph·∫ßn Dead-letter queue, ch·ªçn:\nSQS queue ho·∫∑c SNS topic ƒë√£ t·∫°o tr∆∞·ªõc ƒë√≥. L∆∞u c·∫•u h√¨nh.\nV√≠ d·ª• k·ªãch b·∫£n Gi·∫£ s·ª≠ Lambda ƒë·ªçc d·ªØ li·ªáu t·ª´ DynamoDB Stream nh∆∞ng g·∫∑p m·ªôt b·∫£n ghi b·ªã thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc:\nLambda s·∫Ω retry theo c·∫•u h√¨nh.\nN·∫øu v·∫´n th·∫•t b·∫°i, b·∫£n ghi ƒë√≥ ƒë∆∞·ª£c g·ª≠i v√†o SQS DLQ.\nB·∫°n c√≥ th·ªÉ t·∫°o m·ªôt Lambda kh√°c ƒë·ªçc t·ª´ DLQ ƒë·ªÉ x·ª≠ l√Ω th·ªß c√¥ng ho·∫∑c g·ª≠i c·∫£nh b√°o.\nL·ª£i √≠ch c·ªßa DLQ:\nKh√¥ng m·∫•t d·ªØ li·ªáu l·ªói: M·ªçi b·∫£n ghi th·∫•t b·∫°i ƒë·ªÅu ƒë∆∞·ª£c l∆∞u l·∫°i.\nD·ªÖ d√†ng x·ª≠ l√Ω l·∫°i: C√≥ th·ªÉ ch·∫°y l·∫°i logic ho·∫∑c ch·ªânh s·ª≠a d·ªØ li·ªáu.\nTƒÉng ƒë·ªô ·ªïn ƒë·ªãnh: NgƒÉn s·ª± c·ªë lan r·ªông sang c√°c s·ª± ki·ªán kh√°c.\n"
},
{
	"uri": "http://localhost:1313/awsDeployment/vi/4-error-handling/4.4-error-using-cloudwatch-alarm/",
	"title": "T·ª± ƒë·ªông c·∫£nh b√°o khi c√≥ l·ªói b·∫±ng CloudWatch Alarm",
	"tags": [],
	"description": "",
	"content": "Vi·ªác ghi log ho·∫∑c l∆∞u d·ªØ li·ªáu l·ªói v√†o DLQ l√† ch∆∞a ƒë·ªß n·∫øu nh√≥m v·∫≠n h√†nh kh√¥ng ƒë∆∞·ª£c th√¥ng b√°o k·ªãp th·ªùi. ƒê·ªÉ ch·ªß ƒë·ªông ph√°t hi·ªán s·ª± c·ªë, AWS cung c·∫•p CloudWatch Alarm k·∫øt h·ª£p v·ªõi SNS ƒë·ªÉ g·ª≠i c·∫£nh b√°o qua email, SMS ho·∫∑c c√°c h·ªá th·ªëng chat nh∆∞ Slack.\nNguy√™n l√Ω ho·∫°t ƒë·ªông CloudWatch Metrics s·∫Ω ghi nh·∫≠n s·ªë l∆∞·ª£ng l·ªói ho·∫∑c s·ªë l·∫ßn Lambda th·∫•t b·∫°i.\nCloudWatch Alarm s·∫Ω theo d√µi c√°c metric n√†y.\nKhi v∆∞·ª£t ng∆∞·ª°ng ƒë√£ ƒë·ªãnh, Alarm s·∫Ω k√≠ch ho·∫°t h√†nh ƒë·ªông g·ª≠i th√¥ng b√°o qua SNS.\nC√°ch thi·∫øt l·∫≠p c·∫£nh b√°o\nT·∫°o SNS Topic ƒë·ªÉ nh·∫≠n th√¥ng b√°o\nM·ªü SNS Console ‚Üí Create topic ‚Üí ch·ªçn Standard.\nƒê·∫∑t t√™n, t·∫°o topic, sau ƒë√≥ Create subscription ƒë·ªÉ ƒëƒÉng k√Ω email ho·∫∑c SMS nh·∫≠n th√¥ng b√°o.\nX√°c nh·∫≠n ƒëƒÉng k√Ω qua email.\nT·∫°o CloudWatch Alarm\nM·ªü CloudWatch Console ‚Üí Alarms ‚Üí Create alarm.\nCh·ªçn Lambda metrics ‚Üí Errors ho·∫∑c DeadLetterErrors.\nƒê·∫∑t ng∆∞·ª°ng v√≠ d·ª•: \u0026gt; 3 l·ªói trong 5 ph√∫t.\nCh·ªçn Actions ‚Üí g·ª≠i t·ªõi SNS Topic v·ª´a t·∫°o.\nL∆∞u v√† k√≠ch ho·∫°t alarm\nV√≠ d·ª• t√¨nh hu·ªëng\nN·∫øu Lambda th·∫•t b·∫°i 5 l·∫ßn li√™n ti·∫øp trong v√≤ng 10 ph√∫t, CloudWatch Alarm s·∫Ω g·ª≠i email t·ªõi nh√≥m v·∫≠n h√†nh ngay l·∫≠p t·ª©c.\nNh√≥m c√≥ th·ªÉ v√†o ki·ªÉm tra log ho·∫∑c DLQ ƒë·ªÉ x·ª≠ l√Ω nguy√™n nh√¢n.\nL·ª£i √≠ch: Ph·∫£n ·ª©ng nhanh: Gi·∫£m th·ªùi gian ph√°t hi·ªán s·ª± c·ªë.\nGi·∫£m r·ªßi ro m·∫•t d·ªØ li·ªáu: Can thi·ªáp s·ªõm khi l·ªói xu·∫•t hi·ªán h√†ng lo·∫°t.\nT·ª± ƒë·ªông h√≥a gi√°m s√°t: Kh√¥ng c·∫ßn ng·ªìi xem log th·ªß c√¥ng.\n"
},
{
	"uri": "http://localhost:1313/awsDeployment/vi/4-error-handling/",
	"title": "X·ª≠ l√Ω l·ªói",
	"tags": [],
	"description": "",
	"content": "Trong c√°c h·ªá th·ªëng x·ª≠ l√Ω d·ªØ li·ªáu th·ªùi gian th·ª±c, l·ªói l√† ƒëi·ªÅu kh√≥ tr√°nh kh·ªèi. Ch√∫ng c√≥ th·ªÉ xu·∫•t hi·ªán do d·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá, s·ª± c·ªë m·∫°ng, thi·∫øu quy·ªÅn truy c·∫≠p, ho·∫∑c nh·ªØng t√¨nh hu·ªëng b·∫•t ng·ªù trong logic x·ª≠ l√Ω. N·∫øu kh√¥ng ƒë∆∞·ª£c x·ª≠ l√Ω ƒë√∫ng c√°ch, c√°c l·ªói n√†y c√≥ th·ªÉ l√†m gi√°n ƒëo·∫°n quy tr√¨nh, g√¢y m·∫•t d·ªØ li·ªáu ho·∫∑c t·∫°o ra k·∫øt qu·∫£ kh√¥ng nh·∫•t qu√°n.\nTrong ƒë·ªÅ t√†i n√†y, vi·ªác x·ª≠ l√Ω l·ªói ƒë·∫∑c bi·ªát quan tr·ªçng v√¨ h√†m Lambda l√†m vi·ªác tr·ª±c ti·∫øp v·ªõi d·ªØ li·ªáu t·ª´ DynamoDB Stream. Ch·ªâ m·ªôt b·∫£n ghi l·ªói kh√¥ng ƒë∆∞·ª£c x·ª≠ l√Ω ƒë√∫ng c√°ch c≈©ng c√≥ th·ªÉ khi·∫øn h·ªá th·ªëng l·∫∑p l·∫°i x·ª≠ l√Ω ho·∫∑c ch·∫∑n c√°c s·ª± ki·ªán ti·∫øp theo.\nƒê·ªÉ ƒë·∫£m b·∫£o h·ªá th·ªëng ·ªïn ƒë·ªãnh v√† ƒë√°ng tin c·∫≠y, AWS cung c·∫•p nhi·ªÅu c∆° ch·∫ø x·ª≠ l√Ω l·ªói nh∆∞:\nGhi log v·ªõi CloudWatch ‚Äì L∆∞u l·∫°i chi ti·∫øt l·ªói ƒë·ªÉ ph√¢n t√≠ch v√† kh·∫Øc ph·ª•c.\nC∆° ch·∫ø retry v√† backoff ‚Äì T·ª± ƒë·ªông th·ª≠ x·ª≠ l√Ω l·∫°i s·ª± ki·ªán l·ªói v·ªõi kho·∫£ng tr·ªÖ tƒÉng d·∫ßn.\nDead Letter Queue (DLQ) ‚Äì L∆∞u tr·ªØ c√°c s·ª± ki·ªán l·ªói nhi·ªÅu l·∫ßn ƒë·ªÉ x·ª≠ l√Ω th·ªß c√¥ng sau n√†y.\nX·ª≠ l√Ω ngo·∫°i l·ªá t√πy ch·ªânh ‚Äì Ki·ªÉm tra, l·ªçc, v√† chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu nh·∫±m tr√°nh l·ªói kh√¥ng c·∫ßn thi·∫øt.\nNh·ªù √°p d·ª•ng c√°c ph∆∞∆°ng ph√°p tr√™n, h·ªá th·ªëng c√≥ th·ªÉ ph·ª•c h·ªìi sau l·ªói, duy tr√¨ t√≠nh nh·∫•t qu√°n d·ªØ li·ªáu v√† gi·∫£m chi ph√≠ v·∫≠n h√†nh.\nN·ªôi dung: X·ª≠ l√Ω ngo·∫°i l·ªá trong Lambda Ghi Log l·ªói v·ªõi CloudWatch S·ª≠ d·ª•ng Dead Letter Queue (DLQ) ƒë·ªÉ l∆∞u l·ªói T·ª± ƒë·ªông c·∫£nh b√°o khi c√≥ l·ªói b·∫±ng CloudWatch "
},
{
	"uri": "http://localhost:1313/awsDeployment/vi/5-cleanup/",
	"title": "D·ªçn d·∫πp t√†i nguy√™n",
	"tags": [],
	"description": "",
	"content": "Sau khi ho√†n t·∫•t th·ª≠ nghi·ªám ho·∫∑c tri·ªÉn khai, vi·ªác d·ªçn d·∫πp t√†i nguy√™n AWS l√† r·∫•t quan tr·ªçng ƒë·ªÉ:\nTr√°nh ph√°t sinh chi ph√≠ kh√¥ng c·∫ßn thi·∫øt. Gi·∫£m r·ªßi ro b·∫£o m·∫≠t t·ª´ c√°c d·ªãch v·ª• ho·∫∑c quy·ªÅn kh√¥ng c√≤n s·ª≠ d·ª•ng. Gi·ªØ cho t√†i kho·∫£n AWS g·ªçn g√†ng v√† d·ªÖ qu·∫£n l√Ω. D∆∞·ªõi ƒë√¢y l√† h∆∞·ªõng d·∫´n chi ti·∫øt c√°c b∆∞·ªõc x√≥a t·ª´ng lo·∫°i t√†i nguy√™n ƒë√£ s·ª≠ d·ª•ng trong d·ª± √°n.\nXo√° Lambda Function. Truy c·∫≠p v√†o Lambda Ch·ªçn c√°c Function c·∫ßn xo√°. Ch·ªçn Action \u0026ndash;\u0026gt; Ch·ªçn Delete Nh·∫≠p confirm \u0026ndash;\u0026gt; Ch·ªçn Delete X√≥a DynamoDB Table v√† Stream. Truy c·∫≠p v√†o DynamoDB Ch·ªçn c√°c Tables ƒë√£ t·∫°o Ch·ªçn Delete Nh·∫≠p confirm \u0026ndash;\u0026gt; Delete X√≥a SQS/SNS (DLQ) N·∫øu d·ª± √°n c√≥ s·ª≠ d·ª•ng Dead Letter Queue (DLQ):\nM·ªü SQS (n·∫øu DLQ l√† SQS queue): Ch·ªçn queue c·∫ßn x√≥a. Ch·ªçn Delete v√† x√°c nh·∫≠n. M·ªü SNS (n·∫øu DLQ l√† SNS topic): Ch·ªçn topic c·∫ßn x√≥a. Ch·ªçn Delete v√† x√°c nh·∫≠n. X√≥a Log Group trong CloudWatch Truy c·∫≠p v√†o CloudWatch Ch·ªçn Log groups. T√¨m log group theo t√™n h√†m Lambda, v√≠ d·ª•: /aws/lambda/DynamoStreamProcessor. Ch·ªçn log group ‚Üí Actions ‚Üí Delete log group. Ch·ªçn Delete ƒë·ªÉ x√°c nh·∫≠n x√≥a. X√≥a IAM Role Truy c·∫≠p Roles Ch·ªçn role ƒë√£ c·∫•p quy·ªÅn cho Lambda ho·∫∑c c√°c d·ªãch v·ª• kh√°c trong d·ª± √°n. Ch·ªçn Delete Nh·∫≠p delete \u0026ndash;\u0026gt; Ch·ªçn Delete ƒë·ªÉ xo√°. "
},
{
	"uri": "http://localhost:1313/awsDeployment/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/awsDeployment/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/awsDeployment/vi/2-prerequiste/2.3-create-lambda/",
	"title": "T·∫°o Lambda v√† g·∫Øn v·ªõi DynamoDB Stream",
	"tags": [],
	"description": "",
	"content": "Sau khi ƒë√£ t·∫°o b·∫£ng DynamoDB v√† b·∫≠t ch·ª©c nƒÉng Stream, b∆∞·ªõc ti·∫øp theo l√† x√¢y d·ª±ng h√†m Lambda ƒë·ªÉ x·ª≠ l√Ω c√°c s·ª± ki·ªán ƒë∆∞·ª£c ghi nh·∫≠n t·ª´ Stream ƒë√≥. AWS Lambda cho ph√©p b·∫°n vi·∫øt m√£ th·ª±c thi ph·∫£n ·ª©ng ngay khi d·ªØ li·ªáu trong DynamoDB thay ƒë·ªïi ‚Äî ch·∫≥ng h·∫°n nh∆∞ khi c√≥ m·ªôt b·∫£n ghi m·ªõi ƒë∆∞·ª£c th√™m v√†o, b·ªã c·∫≠p nh·∫≠t, ho·∫∑c b·ªã x√≥a.\nTrong b∆∞·ªõc n√†y, ch√∫ng ta s·∫Ω t·∫°o m·ªôt h√†m Lambda s·ª≠ d·ª•ng ng√¥n ng·ªØ l·∫≠p tr√¨nh ph√π h·ª£p (v√≠ d·ª•: Python ho·∫∑c Node.js), sau ƒë√≥ c·∫•u h√¨nh ƒë·ªÉ h√†m n√†y ƒë∆∞·ª£c t·ª± ƒë·ªông k√≠ch ho·∫°t b·ªüi s·ª± ki·ªán t·ª´ DynamoDB Stream. Vi·ªác n√†y gi√∫p h·ªá th·ªëng c√≥ th·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu th·ªùi gian th·ª±c m√† kh√¥ng c·∫ßn qu·∫£n l√Ω m√°y ch·ªß, ƒë·ªìng th·ªùi d·ªÖ d√†ng m·ªü r·ªông khi l∆∞u l∆∞·ª£ng tƒÉng cao.\nL·ª£i √≠ch: X·ª≠ l√Ω th·ªùi gian th·ª±c: d·ªØ li·ªáu ƒë∆∞·ª£c c·∫≠p nh·∫≠t ho·∫∑c th√™m m·ªõi v√†o DynamoDB s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ngay l·∫≠p t·ª©c qua Lambda.\nKh√¥ng c·∫ßn qu·∫£n l√Ω h·∫° t·∫ßng: Lambda l√† d·ªãch v·ª• serverless n√™n b·∫°n kh√¥ng c·∫ßn v·∫≠n h√†nh m√°y ch·ªß n√†o.\nT√≠ch h·ª£p m∆∞·ª£t m√†: vi·ªác k·∫øt n·ªëi DynamoDB v√† Lambda qua Stream ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp b·ªüi AWS v·ªõi thao t√°c ƒë∆°n gi·∫£n.\nSau khi t·∫°o xong, b·∫°n c√≥ th·ªÉ vi·∫øt logic x·ª≠ l√Ω nh∆∞: g·ª≠i th√¥ng b√°o, ghi log, ƒë·ªìng b·ªô v·ªõi d·ªãch v·ª• kh√°c, ho·∫∑c th·ª±c hi·ªán c√°c nghi·ªáp v·ª• ƒë·∫∑c th√π.\nT·∫°o Lambda Function ƒêi t·ªõi T·∫°o Lambda Function Nh·∫•p v√†o Lambda. Nh·∫•p v√†o Create a function. Ch·ªçn : Ch·ªçn Author from scratch Function name: DynamoStreamProcessor Runtime: Node.js 22.x Ch·ªçn x86_64 Ch·ªçn Use an existing role \u0026gt; Ch·ªçn ƒë√∫ng LambdaDynamoDBStreamRole ƒë√£ t·∫°o tr∆∞·ªõc ƒë√≥ G·∫Øn DynamoDB Stream Trigger v√†o Lambda function Sau khi ƒë√£ t·∫°o xong h√†m Lambda v√† b·∫≠t DynamoDB Streams cho b·∫£ng d·ªØ li·ªáu, b∆∞·ªõc ti·∫øp theo l√† c·∫•u h√¨nh ƒë·ªÉ Lambda t·ª± ƒë·ªông ƒë∆∞·ª£c k√≠ch ho·∫°t (trigger) m·ªói khi b·∫£ng DynamoDB c√≥ thay ƒë·ªïi d·ªØ li·ªáu (th√™m, s·ª≠a, x√≥a).\nN·ªëi b·∫£ng DynamoDB ƒë√£ b·∫≠t Stream v·ªõi Lambda ƒë·ªÉ x·ª≠ l√Ω real-time data m·ªói khi c√≥ thay ƒë·ªïi tr√™n b·∫£ng. M·ªü Lambda Function v·ª´a t·∫°o: V√†o Lambda.\nCh·ªçn function v·ª´a t·∫°o t√™n: DynamoStreamProcessor. Ch·ªçn Add trigger Ch·ªçn d·ªãch v·ª•: DynamoDB Ch·ªçn:\nTable: OrdersTable (ho·∫∑c t√™n b·∫£ng b·∫°n ƒë√£ t·∫°o)\nBatch size: Gi·ªØ m·∫∑c ƒë·ªãnh 100\nStarting position: Ch·ªçn LATEST (ch·ªâ nh·∫≠n d·ªØ li·ªáu m·ªõi)\nSau ƒë√≥ ch·ªçn Add Sau khi ho√†n th√†nh: "
}]