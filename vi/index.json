[
{
	"uri": "https://github.com/thinhnguyen501511.github.io/FCJ-WorkShop/vi/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Tri·ªÉn khai ·ª©ng d·ª•ng web tr√™n AWS s·ª≠ d·ª•ng EC2, RDS v√† S3 T·ªïng th·ªÉ Trong d·ª± √°n n√†y, b·∫°n s·∫Ω t√¨m hi·ªÉu c√°c nguy√™n t·∫Øc c·ªët l√µi v·ªÅ tri·ªÉn khai v√† qu·∫£n l√Ω ·ª©ng d·ª•ng web tr√™n AWS s·ª≠ d·ª•ng EC2, RDS v√† S3. B·∫°n s·∫Ω thi·∫øt l·∫≠p h·∫° t·∫ßng, n∆°i EC2 x·ª≠ l√Ω logic ·ª©ng d·ª•ng, RDS qu·∫£n l√Ω d·ªØ li·ªáu quan h·ªá v√† S3 l∆∞u tr·ªØ c√°c t·ªáp tƒ©nh, t·∫°o n√™n m·ªôt h·ªá th·ªëng tr√™n n·ªÅn t·∫£ng ƒë√°m m√¢y an to√†n, c√≥ kh·∫£ nƒÉng m·ªü r·ªông v√† hi·ªáu qu·∫£.\nN·ªôi dung Gi·ªõi thi·ªáu Y√™u c·∫ßu chu·∫©n b·ªã Thi·∫øt l·∫≠p h·∫° t·∫ßng v·ªõi EC2 v√† c√°c d·ªãch v·ª• AWS(s3,RDB) Tri·ªÉn khai ·ª©ng d·ª•ng tr√™n EC2 tri·ªÉn khai v√† kiem th∆∞ api tr√™n ec2 D·ªçn d·∫πp h·ªá th·ªëng "
},
{
	"uri": "https://github.com/thinhnguyen501511.github.io/FCJ-WorkShop/vi/4-setting-up-docker-in-ec2/4.1-prerequiste-deployment-ec2/",
	"title": "c√°c bu·ªõc chu·∫©n b·ªã cho tri·ªÉn khai in ec2",
	"tags": [],
	"description": "",
	"content": "H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t Docker tr√™n EC2, t·∫°o m√¥i tr∆∞·ªùng Docker Compose cho PhpMyAdmin v√† MySQL, sau ƒë√≥ t·∫°o c∆° s·ªü d·ªØ li·ªáu \u0026ldquo;myapp\u0026rdquo; trong container Docker.\nc√°c bu·ªõc chu·∫©n b·ªã cho tri·ªÉn khai in ec2 Truy c·∫≠p v√†o c√°c bu·ªõc chu·∫©n b·ªã cho tri·ªÉn khai in ec2 C√†i ƒë·∫∑t Docker b·∫±ng l·ªánh sudo snap install docker. T·∫°o Docker Compose cho PhpMyAdmin 8 tr√™n Ubuntu EC2 b·∫±ng l·ªánh Create DockerCompose Phpmyadmin8 in ubuntu ec2. T·∫°o Docker Compose cho PhpMyAdmin 8 tr√™n Ubuntu EC2 b·∫±ng l·ªánh docker-compose -f ./deployment.yaml up -d mysql8-container Truy c·∫≠p v√†o ipv4 port:8100 login root in database 2. Truy c·∫≠p v√†o create database myapp in container docker\nt√™n: myapp. ch·ªçn lay co so du lieu co san tren may tinh xem b·∫£ng ƒë√£ t·∫°o "
},
{
	"uri": "https://github.com/thinhnguyen501511.github.io/FCJ-WorkShop/vi/1-introduce/",
	"title": "Gi∆°ÃÅi thi√™Ã£u",
	"tags": [],
	"description": "",
	"content": "X·ª≠ l√Ω d·ªØ li·ªáu th·ªùi gian th·ª±c v·ªõi DynamoDB Streams v√† AWS Lambda l√† m·ªôt ki·∫øn tr√∫c serverless hi·ªán ƒë·∫°i, gi√∫p b·∫°n x√¢y d·ª±ng h·ªá th·ªëng ph·∫£n ·ª©ng nhanh v·ªõi c√°c thay ƒë·ªïi trong c∆° s·ªü d·ªØ li·ªáu m√† kh√¥ng c·∫ßn v·∫≠n h√†nh m√°y ch·ªß. M√¥ h√¨nh n√†y t·∫≠n d·ª•ng t·ªët kh·∫£ nƒÉng m·ªü r·ªông, t√≠nh s·∫µn s√†ng cao v√† ti·∫øt ki·ªám chi ph√≠ t·ª´ c√°c d·ªãch v·ª• AWS nh∆∞ DynamoDB, Lambda, v√† CloudWatch.\nKhi √°p d·ª•ng ki·∫øn tr√∫c n√†y, b·∫°n ƒë·∫°t ƒë∆∞·ª£c nhi·ªÅu l·ª£i √≠ch:\nX·ª≠ l√Ω th·ªùi gian th·ª±c: M·ªçi thay ƒë·ªïi (Insert, Update, Delete) trong b·∫£ng DynamoDB ƒë·ªÅu c√≥ th·ªÉ k√≠ch ho·∫°t Lambda ƒë·ªÉ x·ª≠ l√Ω ngay l·∫≠p t·ª©c, ph√π h·ª£p cho c√°c ·ª©ng d·ª•ng y√™u c·∫ßu ƒë·ªô tr·ªÖ th·∫•p nh∆∞ th·ªëng k√™, c·∫£nh b√°o, ƒë·ªìng b·ªô d·ªØ li·ªáu. Serverless \u0026amp; d·ªÖ tri·ªÉn khai: Kh√¥ng c·∫ßn qu·∫£n l√Ω m√°y ch·ªß. Ch·ªâ c·∫ßn c·∫•u h√¨nh trigger gi·ªØa DynamoDB v√† Lambda l√† c√≥ th·ªÉ tri·ªÉn khai pipeline x·ª≠ l√Ω s·ª± ki·ªán. Kh·∫£ nƒÉng m·ªü r·ªông linh ho·∫°t: Lambda t·ª± ƒë·ªông scale theo s·ªë l∆∞·ª£ng record t·ª´ stream. B·∫°n kh√¥ng c·∫ßn lo v·ªÅ over-provisioning ho·∫∑c under-provisioning nh∆∞ h·ªá th·ªëng truy·ªÅn th·ªëng. T√°ch bi·ªát logic x·ª≠ l√Ω: C√°c b∆∞·ªõc x·ª≠ l√Ω nh∆∞ l·ªçc, bi·∫øn ƒë·ªïi (transformation), t·ªïng h·ª£p (aggregation), g·ª≠i th√¥ng b√°o hay l∆∞u tr·ªØ th√™m v√†o S3/RDS c√≥ th·ªÉ ƒë∆∞·ª£c x·ª≠ l√Ω trong t·ª´ng Lambda ho·∫∑c chu·ªói c√°c Lambda k·∫øt h·ª£p v·ªõi EventBridge ho·∫∑c Step Functions. T·ªëi ∆∞u hi·ªáu su·∫•t: Nh·ªù v√†o k·ªπ thu·∫≠t batch processing, memory tuning v√† concurrent execution, h·ªá th·ªëng c√≥ th·ªÉ x·ª≠ l√Ω h√†ng ng√†n s·ª± ki·ªán m·ªói gi√¢y m√† v·∫´n ƒë·∫£m b·∫£o hi·ªáu nƒÉng. Gi√°m s√°t d·ªÖ d√†ng: T√≠ch h·ª£p CloudWatch ƒë·ªÉ theo d√µi log, thi·∫øt l·∫≠p dashboard, c·∫£nh b√°o l·ªói (error handling) v√† ph√¢n t√≠ch hi·ªáu su·∫•t chi ti·∫øt theo t·ª´ng giai ƒëo·∫°n x·ª≠ l√Ω. T·ªëi ∆∞u chi ph√≠: Ch·ªâ tr·∫£ ph√≠ theo s·ªë l·∫ßn th·ª±c thi Lambda v√† l∆∞u tr·ªØ DynamoDB. Khi k·∫øt h·ª£p th√™m provisioned throughput, b·∫°n c√≥ th·ªÉ gi·∫£m \u0026gt;30% chi ph√≠ so v·ªõi c√°c gi·∫£i ph√°p truy·ªÅn th·ªëng. D·ªÖ ki·ªÉm th·ª≠ v√† v·∫≠n h√†nh: C√≥ th·ªÉ m√¥ ph·ªèng c√°c lu·ªìng s·ª± ki·ªán ƒë·ªÉ ki·ªÉm th·ª≠, vi·∫øt unit test v√† thi·∫øt l·∫≠p c√°c quy tr√¨nh kh√¥i ph·ª•c s·ª± c·ªë (operational procedures) m·ªôt c√°ch b√†i b·∫£n. Th√¥ng qua vi·ªác k·∫øt h·ª£p DynamoDB Streams v√† AWS Lambda, ki·∫øn tr√∫c n√†y mang ƒë·∫øn m·ªôt gi·∫£i ph√°p m·∫°nh m·∫Ω, linh ho·∫°t, d·ªÖ m·ªü r·ªông v√† ƒë·∫∑c bi·ªát ph√π h·ª£p cho c√°c h·ªá th·ªëng x·ª≠ l√Ω d·ªØ li·ªáu real-time nh∆∞ h·ªá th·ªëng ph√¢n t√≠ch logs, tracking h√†nh vi ng∆∞·ªùi d√πng, h·ªá th·ªëng ph·∫£n h·ªìi t·ª©c th√¨ v√† nhi·ªÅu ·ª©ng d·ª•ng hi·ªán ƒë·∫°i kh√°c tr√™n n·ªÅn t·∫£ng ƒë√°m m√¢y AWS.\n"
},
{
	"uri": "https://github.com/thinhnguyen501511.github.io/FCJ-WorkShop/vi/2-prerequiste/2.1-create-iam-role/",
	"title": "T·∫°o IAM Role cho AWS Lambda",
	"tags": [],
	"description": "",
	"content": "Ph·∫ßn n√†y h∆∞·ªõng d·∫´n c√°c b∆∞·ªõc ƒë·ªÉ t·∫°o m·ªôt IAM Role cho ki·∫øn tr√∫c ƒë∆∞·ª£c m√¥ t·∫£ trong s∆° ƒë·ªì. IAM Role n√†y s·∫Ω cho ph√©p Lambda function c√≥ quy·ªÅn ƒë·ªçc DynamoDB Stream v√† ghi log ra CloudWatch.\nT·ªïng quan ki·∫øn tr√∫c sau khi b·∫°n ho√†n th√†nh b∆∞·ªõc n√†y s·∫Ω nh∆∞ sau:\nT·∫°o vai tr√≤ IAM ƒêi t·ªõi T·∫°o vai tr√≤ Iam Nh·∫•p v√†o Iam. Nh·∫•p v√†o T·∫°o vai tr√≤. Nh·∫•p v√†o D·ªãch v·ª• AWS, sau ƒë√≥ Nh·∫•p v√†o Lambda ƒë·ªÉ x√°c nh·∫≠n. ƒêi t·ªõi Th√™m quy·ªÅn Nh·∫•p v√†o AWSLambdaBasicExecutionRole. Nh·∫•p v√†o AmazonDynamoDBFullAccess. ƒêi t·ªõi [Ti·∫øp theo]\nƒêi t·ªõi T√™n, ƒë√°nh gi√° v√† t·∫°o\nT√™n data-streaming-system-role.. B·∫•m v√†o T·∫°o vai tr√≤ N·ªôi dung Create DynamoDB "
},
{
	"uri": "https://github.com/thinhnguyen501511.github.io/FCJ-WorkShop/vi/3-setting-up-environment-ec2-s3-docker/3.1-create-s3-uploadimage/",
	"title": "X·ª≠ l√Ω d·ªØ li·ªáu trong Lambda ",
	"tags": [],
	"description": "",
	"content": "Trong m·ªôt h·ªá th·ªëng x·ª≠ l√Ω th·ªùi gian th·ª±c, vi·ªác ti·∫øp nh·∫≠n v√† chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ lu·ªìng s·ª± ki·ªán (stream) l√† b∆∞·ªõc quan tr·ªçng nh·∫±m ƒë·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c ph√¢n t√≠ch v√† s·ª≠ d·ª•ng ƒë√∫ng m·ª•c ƒë√≠ch. AWS DynamoDB Stream cho ph√©p theo d√µi m·ªçi thay ƒë·ªïi trong b·∫£ng d·ªØ li·ªáu, v√† AWS Lambda ƒë√≥ng vai tr√≤ l√† \u0026ldquo;ng∆∞·ªùi nghe\u0026rdquo; (listener) th·ª±c hi·ªán x·ª≠ l√Ω ngay khi c√≥ thay ƒë·ªïi x·∫£y ra.\nTrong ph·∫ßn n√†y, ta s·∫Ω hi·ªán th·ª±c h√≥a transformation logic ‚Äì logic bi·∫øn ƒë·ªïi d·ªØ li·ªáu ‚Äì trong Lambda function. D·ªØ li·ªáu t·ª´ DynamoDB Stream s·∫Ω ƒë∆∞·ª£c truy xu·∫•t, gi·∫£i m√£ v√† bi·∫øn ƒë·ªïi theo y√™u c·∫ßu nghi·ªáp v·ª• c·ª• th·ªÉ, gi√∫p t·∫°o ti·ªÅn ƒë·ªÅ cho c√°c b∆∞·ªõc x·ª≠ l√Ω ti·∫øp theo nh∆∞ t·ªïng h·ª£p, l∆∞u tr·ªØ, ph√¢n t√≠ch ho·∫∑c g·ª≠i ƒëi c√°c h·ªá th·ªëng kh√°c.\nƒêi t·ªõi Lambda Function ƒë√£ t·∫°o: Ch·ªçn function b·∫°n ƒë√£ t·∫°o, v√≠ d·ª•: DynamoStreamProcessor K√©o xu·ªëng ph·∫ßn Code source G√°n ƒëo·∫°n code v√†o nh∆∞ sau: Gi·∫£i th√≠ch: event.Records: L√† danh s√°ch c√°c s·ª± ki·ªán t·ª´ DynamoDB (m·ªói l·∫ßn thay ƒë·ªïi c√≥ th·ªÉ g·ª≠i nhi·ªÅu record).\nrecord.eventName: X√°c ƒë·ªãnh lo·∫°i thay ƒë·ªïi (INSERT, MODIFY, REMOVE).\nrecord.dynamodb.NewImage: D·ªØ li·ªáu m·ªõi sau khi thay ƒë·ªïi.\nBi·∫øn transformed: L√† n∆°i b·∫°n th·ª±c hi·ªán logic bi·∫øn ƒë·ªïi d·ªØ li·ªáu.\nKi·ªÉm Th·ª≠ D·ªØ Li·ªáu ƒê·ªÉ x√°c nh·∫≠n r·∫±ng Lambda ho·∫°t ƒë·ªông ƒë√∫ng logic b·∫°n ƒë√£ vi·∫øt, ta s·∫Ω th·ª≠ t·∫°o d·ªØ li·ªáu m·ªõi v√†o b·∫£ng DynamoDB v√† xem Lambda c√≥ k√≠ch ho·∫°t kh√¥ng.\nT·∫°o b·∫£n ghi m·ªõi trong b·∫£ng DynamoDB V√†o AWS Console ‚Üí DynamoDB ‚Üí ch·ªçn b·∫£ng b·∫°n ƒë√£ t·∫°o (OrdersTable) Ch·ªçn Explore table items Ch·ªçn Create item Ch·ªçn JSON view\nTh√™m b·∫£n ghi m·ªõi\nCh·ªçn Create item Ki·ªÉm tra k·∫øt qu·∫£ th·ª±c thi c·ªßa Lambda V√†o AWS Console \u0026gt; CloudWatch\nCh·ªçn menu b√™n tr√°i: Logs ‚Üí Log groups\nT√¨m log group theo t√™n h√†m Lambda: /aws/lambda/DynamoStreamProcessor\nNh·∫•n v√†o log group ƒë√≥. Ch·ªçn log stream c√≥ th·ªùi gian g·∫ßn nh·∫•t ‚Äì t∆∞∆°ng ·ª©ng v·ªõi l·∫ßn b·∫°n t·∫°o item trong DynamoDB. B·∫°n s·∫Ω th·∫•y nhi·ªÅu d√≤ng log t∆∞∆°ng t·ª± sau: √ù nghƒ©a:\nüì• Event Name: Cho bi·∫øt ƒë√¢y l√† thao t√°c INSERT, MODIFY, hay REMOVE\nüü¢ New Order Received: ƒê√£ ƒë·ªçc ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ DynamoDB stream\nüîÅ Transformed Order: ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng theo logic b·∫°n vi·∫øt trong Lambda\nREPORT: T·ªïng th·ªùi gian x·ª≠ l√Ω, b·ªô nh·ªõ d√πng, v.v.\n"
},
{
	"uri": "https://github.com/thinhnguyen501511.github.io/FCJ-WorkShop/vi/2-prerequiste/",
	"title": "Chu·∫©n B·ªã",
	"tags": [],
	"description": "",
	"content": "ƒê·ªÉ tri·ªÉn khai h·ªá th·ªëng x·ª≠ l√Ω d·ªØ li·ªáu th·ªùi gian th·ª±c s·ª≠ d·ª•ng DynamoDB Triggers v√† AWS Lambda, b·∫°n c·∫ßn th·ª±c hi·ªán m·ªôt s·ªë b∆∞·ªõc chu·∫©n b·ªã quan tr·ªçng nh·∫±m ƒë·∫£m b·∫£o quy·ªÅn truy c·∫≠p v√† m√¥i tr∆∞·ªùng tri·ªÉn khai ph√π h·ª£p tr√™n AWS. Trong ph·∫ßn chu·∫©n b·ªã n√†y, ch√∫ng ta s·∫Ω ti·∫øn h√†nh t·∫°o IAM Role ƒë·ªÉ c·∫•p quy·ªÅn cho Lambda c√≥ th·ªÉ truy c·∫≠p ƒë∆∞·ª£c v√†o c√°c d·ªãch v·ª• c·∫ßn thi·∫øt nh∆∞ DynamoDB, CloudWatch Logs, c≈©ng nh∆∞ c√°c d·ªãch v·ª• kh√°c ph·ª•c v·ª• m·ª•c ƒë√≠ch x·ª≠ l√Ω, l∆∞u tr·ªØ v√† gi√°m s√°t d·ªØ li·ªáu. Sau khi c·∫•u h√¨nh IAM xong, ch√∫ng ta s·∫Ω ti·∫øp t·ª•c t·∫°o b·∫£ng DynamoDB v√† x√¢y d·ª±ng h·ªá th·ªëng streaming trigger b·∫±ng Lambda.\nN·ªôi Dung T·∫°o IAM Role T·∫°o DynamoDB Table v√† b·∫≠t DynamoDB Stream T·∫°o Lambda v√† g·∫Øn v·ªõi DynamoDB Stream "
},
{
	"uri": "https://github.com/thinhnguyen501511.github.io/FCJ-WorkShop/vi/3-setting-up-environment-ec2-s3-docker/3.2-create-rds/",
	"title": "T·∫°o RDS",
	"tags": [],
	"description": "",
	"content": "Quy tr√¨nh t·∫°o RDS bao g·ªìm: truy c·∫≠p v√†o d·ªãch v·ª• RDS, ch·ªçn Create Database, l·ª±a ch·ªçn lo·∫°i c∆° s·ªü d·ªØ li·ªáu MySQL, c·∫•u h√¨nh c√°c th√¥ng s·ªë c·∫ßn thi·∫øt v√† x√°c nh·∫≠n ƒë·ªÉ t·∫°o c∆° s·ªü d·ªØ li·ªáu th√†nh c√¥ng.\nƒêi t·ªõi T·∫°o S3.\nV√†o jinmeister-datasource. B·∫•m v√†o Thu·ªôc t√≠nh B·∫•m v√†o Th√¥ng b√°o s·ª± ki·ªán B·∫•m v√†o T·∫°o th√¥ng b√°o s·ª± ki·ªán ƒêi t·ªõi T·∫°o th√¥ng b√°o s·ª± ki·ªán\nT√™n: data-upload/.txt . Nh·∫•n v√†o T·∫•t c·∫£ s·ª± ki·ªán t·∫°o ƒë·ªëi t∆∞·ª£ng. Nh·∫•n v√†o H√†m Lambada. B·∫•m ch·ªçn t·ª´ h√†m Lambda c·ªßa b·∫°n. H√†m Lambda: nh√† s·∫£n xu·∫•t. "
},
{
	"uri": "https://github.com/thinhnguyen501511.github.io/FCJ-WorkShop/vi/4-setting-up-docker-in-ec2/4.2-setup-dockerhub-in-ec2/",
	"title": "Thi·∫øt l·∫≠p dockerhub trong ec2",
	"tags": [],
	"description": "",
	"content": "Trong b∆∞·ªõc n√†y, H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t Docker v√† c·∫•u h√¨nh Docker Compose tr√™n EC2 cho c√°c d·ªãch v·ª• nh∆∞ MySQL, PhpMyAdmin, Redis, v√† Spring Boot.\nc√†i d·∫∑t dockerhub-in-ec2 ki·ªÉm tra t·ªáp cat deployment.yaml Correct the following code. T·∫°o c√°c container Docker b·∫±ng l·ªánh docker-compose -f ./deployment.yaml up -d mysql8-container Ki·ªÉm tra c√°c container ƒëang ch·∫°y tr√™n EC2 v·ªõi l·ªánh docker ps T·∫°o container Spring Boot v·ªõi l·ªánh docker-compose -f ./deployment.yaml up -d myapp-spring-container #scp -pr . root@103.124.93.29:/root/ services: mysql8-container: container_name: mysql123 image: mysql:8.3.0 restart: always environment: MYSQL_ROOT_PASSWORD: 123456 MYSQL_DATABASE: myapp ports: - 3308:3306 #volumes: #- ./sql/myapp.sql:/docker-entrypoint-initdb.d/init-script.sql networks: - myapp-network phpmyadmin8-container: #intel host image: phpmyadmin/phpmyadmin #image: arm64v8/phpmyadmin #choose this if you are running on Mac Apple Silicon(M1, M2,...) container_name: phpmyadmin8-container restart: always depends_on: - mysql8-container ports: - \u0026#34;8100:80\u0026#34; #port mapping environment: PMA_HOST: mysql8-container #phpMyAdmin Host, PMA = PHP My Amin PMA_PORT: 3306 UPLOAD_LIMIT: 500M networks: - myapp-network redis-container: image: docker.io/redis:7.2.3 container_name: redis-container restart: always ports: - \u0026#34;6379:6379\u0026#34; # Port mapping for Redis, you can change the host port as needed volumes: - ./redis-data:/data # Mount a volume for Redis data persistence networks: - myapp-network myapp-spring-container: container_name: myapp-spring-container build: context: . dockerfile: DockerfileJavaSpring #docker tag \u0026lt;image_id\u0026gt; myapp-spring:1.0.0 ports: - 8099:8070 environment: #SPRING_DATASOURCE_URL: jdbc:mysql://mysql8-container:3306/myapp?serverTimezone=UTC\u0026amp;allowPublicKeyRetrieval=true SPRING_DATASOURCE_URL: jdbc:mysql://mysql123:3306/myapp?serverTimezone=UTC\u0026amp;allowPublicKeyRetrieval=true MYSQL_ROOT_PASSWORD: 123456 REDIS_HOST: redis-container REDIS_PORT: 6379 #Kafka broker # KAFKA_BROKER_SERVER: kafka-broker-01 # KAFKA_BROKER_PORT: 19092 #depends_on only waits for the container to start, not for the service inside the container to be fully operational depends_on: - mysql8-container networks: - myapp-network # healthcheck: # #test: [\u0026#34;CMD-SHELL\u0026#34;, \u0026#34;curl --fail http://localhost:8088/healthcheck/health || exit 1\u0026#34;] # test: [\u0026#34;CMD-SHELL\u0026#34;, \u0026#34;curl --fail http://localhost:8088/api/v1/actuator/health || exit 1\u0026#34;] # interval: 30s # timeout: 10s # retries: 3 # start_period: 20s #20s after container created, health check # angular-container: # container_name: angular-container # build: # context: . # dockerfile: DockerfileAngular # Dockerfile ƒë·ªÉ x√¢y d·ª±ng ·ª©ng d·ª•ng Angular # ports: # - \u0026#34;6000:4200\u0026#34; # Port mapping, Angular s·∫Ω ch·∫°y tr√™n port 4200 # environment: # - NODE_ENV=production # volumes: # - ./dist:/usr/share/nginx/html # Mount the Angular build directory to the Nginx container # depends_on: # - backend # Optionally add a dependency to your backend container if needed # networks: # - myapp-network # python-container: # container_name: python-app-container # build: # context: . # dockerfile: DockerfilePython # Dockerfile cho ·ª©ng d·ª•ng Python # ports: # - \u0026#34;6000:5000\u0026#34; # Mapping port cho Flask ho·∫∑c ·ª©ng d·ª•ng Python # environment: # - FLASK_APP=OCR4_python.py # T√™n file ·ª©ng d·ª•ng Python c·ªßa b·∫°n # - FLASK_ENV=production # M√¥i tr∆∞·ªùng s·∫£n xu·∫•t # depends_on: # - mysql8-container # - redis-container # networks: # - myapp-network #docker-compose -f ./deployment.yaml down #docker-compose -f ./deployment.yaml rm -s -f mysql8-container #docker-compose -f ./deployment.yaml up -d mysql8-container #docker-compose -f ./deployment.yaml rm -s -f phpmyadmin8-container #docker-compose -f ./deployment.yaml up -d phpmyadmin8-container #docker-compose -f ./deployment.yaml rm -s -f myapp-spring-container #docker-compose -f ./deployment.yaml up -d myapp-spring-container #docker logs myapp-spring-container #docker-compose -f ./deployment.yaml rm -s -f redis-container #docker-compose -f ./deployment.yaml up -d redis-container #docker-compose -f ./deployment.yaml rm -s -f angular-container networks: myapp-network: name: myapp-network driver: bridge "
},
{
	"uri": "https://github.com/thinhnguyen501511.github.io/FCJ-WorkShop/vi/3-setting-up-environment-ec2-s3-docker/",
	"title": "Bi·∫øn ƒê·ªïi Logic",
	"tags": [],
	"description": "",
	"content": "Trong m·ªôt h·ªá th·ªëng x·ª≠ l√Ω d·ªØ li·ªáu th·ªùi gian th·ª±c, vi·ªác ti·∫øp nh·∫≠n d·ªØ li·ªáu t·ª´ ngu·ªìn (nh∆∞ DynamoDB Stream) m·ªõi ch·ªâ l√† b∆∞·ªõc kh·ªüi ƒë·∫ßu. ƒê·ªÉ t·∫°o ra gi√° tr·ªã t·ª´ d√≤ng d·ªØ li·ªáu n√†y, ch√∫ng ta c·∫ßn th·ª±c hi·ªán qu√° tr√¨nh chuy·ªÉn ƒë·ªïi (transformation) ‚Äì bi·∫øn ƒë·ªïi d·ªØ li·ªáu th√¥ th√†nh ƒë·ªãnh d·∫°ng ph√π h·ª£p v·ªõi m·ª•c ƒë√≠ch x·ª≠ l√Ω, l∆∞u tr·ªØ ho·∫∑c hi·ªÉn th·ªã.\nLambda function ch√≠nh l√† n∆°i ƒë·∫£m nh·∫≠n vai tr√≤ n√†y. M·ªói khi c√≥ thay ƒë·ªïi tr√™n b·∫£ng DynamoDB, m·ªôt b·∫£n ghi s·ª± ki·ªán s·∫Ω ƒë∆∞·ª£c g·ª≠i v√†o h√†m Lambda. T·∫°i ƒë√¢y, d·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c tr√≠ch xu·∫•t, ph√¢n t√≠ch v√† x·ª≠ l√Ω theo logic nghi·ªáp v·ª• c·ª• th·ªÉ. ƒê√¢y l√† b∆∞·ªõc then ch·ªët gi√∫p h·ªá th·ªëng tr·ªü n√™n th√¥ng minh, linh ho·∫°t v√† c√≥ th·ªÉ m·ªü r·ªông trong c√°c t√¨nh hu·ªëng th·ª±c t·∫ø.\nN·ªôi dung X·ª≠ l√Ω d·ªØ li·ªáu trong Lambda t·∫°o RDS c√†i D·∫∑t Docker image "
},
{
	"uri": "https://github.com/thinhnguyen501511.github.io/FCJ-WorkShop/vi/3-setting-up-environment-ec2-s3-docker/3.3-setupdocker-image/",
	"title": "c√†i ƒë·∫∑t docker image",
	"tags": [],
	"description": "",
	"content": "Qu√° tr√¨nh t·∫°o S3, RDS v√† Docker image bao g·ªìm ba b∆∞·ªõc ch√≠nh. ƒê·∫ßu ti√™n, ƒë·ªÉ t·∫°o S3, b·∫°n truy c·∫≠p d·ªãch v·ª• S3, t·∫°o m·ªôt bucket v·ªõi t√™n deployment-image123, b·∫≠t c√°c c√†i ƒë·∫∑t c·∫ßn thi·∫øt v√† t·∫£i h√¨nh ·∫£nh l√™n S3. Ti·∫øp theo, trong b∆∞·ªõc t·∫°o RDS, b·∫°n truy c·∫≠p d·ªãch v·ª• RDS, t·∫°o m·ªôt c∆° s·ªü d·ªØ li·ªáu MySQL, c·∫•u h√¨nh c√°c th√¥ng s·ªë c·∫ßn thi·∫øt v√† x√°c nh·∫≠n ƒë·ªÉ ho√†n t·∫•t vi·ªác t·∫°o c∆° s·ªü d·ªØ li·ªáu. Cu·ªëi c√πng, ƒë·ªëi v·ªõi Docker, b·∫°n truy c·∫≠p Docker Hub, x√¢y d·ª±ng Docker image b·∫±ng l·ªánh docker build, g·∫Øn th·∫ª v·ªõi docker tag v√† ƒë·∫©y image l√™n Docker Hub b·∫±ng l·ªánh docker push.\ntruy c·∫≠p Create docker-image. truy c·∫≠p dockerhub. l·ªánh docker build -t myapp:1.0.4 -f ./DockerfileJavaSpring . l·ªánh docker tag myapp:1.0.4 phi1234/myapp-spring:1.0.4 l·ªánh docker push phi1234/myapp:1.0.4 "
},
{
	"uri": "https://github.com/thinhnguyen501511.github.io/FCJ-WorkShop/vi/4-setting-up-docker-in-ec2/",
	"title": "Thi·∫øt l·∫≠p dockerhub tr√™n ec2",
	"tags": [],
	"description": "",
	"content": "t√≥m l·∫°i trong b∆∞·ªõc n√†y,H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t Docker v√† c·∫•u h√¨nh Docker Compose tr√™n EC2 cho c√°c d·ªãch v·ª• nh∆∞ MySQL, PhpMyAdmin, Redis v√† Spring Boot. C√°c b∆∞·ªõc bao g·ªìm ki·ªÉm tra v√† ch·ªânh s·ª≠a t·ªáp deployment.yaml, t·∫°o c√°c container Docker, v√† s·ª≠ d·ª•ng c√°c l·ªánh Docker Compose ƒë·ªÉ qu·∫£n l√Ω c√°c d·ªãch v·ª•. C·∫•u h√¨nh chi ti·∫øt cho MySQL, PhpMyAdmin, Redis v√† Spring Boot ƒë∆∞·ª£c m√¥ t·∫£ trong t·ªáp YAML.\nN·ªôi dung: T·∫°o c√°c b∆∞·ªõc c·∫ßn chu·∫©n b·ªã ƒë·ªÉ ƒë·∫©y l√™n m√¥i tr∆∞·ªùng ec2 thi·∫øt l·∫≠pdockerhub tr√™n ec2 "
},
{
	"uri": "https://github.com/thinhnguyen501511.github.io/FCJ-WorkShop/vi/5-deployment-and-testing-in-ec2/",
	"title": "tri·ªÉn khai v√† ki·ªÉm th·ª≠ ·ª©ng d·ª•ng springboot tr√™n ec2",
	"tags": [],
	"description": "",
	"content": "In this step, check the inbound endpoint for Spring Boot on EC2, then test the API by registering and logging in via Postman, and verify the Product API using the GET method on Chrome.\n1.Ki·ªÉm tra inbound endpoint\n2.truy c·∫≠p v√†o test IPv4 ec2\ntest API.\nki·ªÉm th·ª≠ ph·∫ßn m√™m postman testapiresgiter. ki·ªÉm th·ª≠ ph·∫ßn m√™mpostman testAPilogin. ch·∫°y tr√™n m√¥i tr∆∞∆°ng chomre method get Product "
},
{
	"uri": "https://github.com/thinhnguyen501511.github.io/FCJ-WorkShop/vi/6-cleanup/",
	"title": "D·ªçn d·∫πp t√†i nguy√™n",
	"tags": [],
	"description": "",
	"content": "Ch√∫ng t√¥i s·∫Ω th·ª±c hi·ªán c√°c b∆∞·ªõc sau ƒë·ªÉ x√≥a t√†i nguy√™n m√† ch√∫ng t√¥i ƒë√£ t·∫°o trong b√†i t·∫≠p n√†y.\nx√≥a nh√≥m s3 truy c·∫≠p v√†o Amazon S3 nh·∫•n Instances. nh·∫•n t√™n *deployment-image123. nh·∫•n r·ªóng bucket. xo√≥ t√™n deployment-image123. x√≥a c∆° s·ªü d·ªØ li·ªáu RDS truy c·∫≠p RDS\nnh·∫•n Applications. nh·∫•n Actions sau ƒë√≥ b·∫•m enter Delete. Xoa m√¥i tr∆∞·ªùng ec2 nh·∫•n instance springboot-myappsql. nh·∫•n stop instance nh·∫•n teminate (delete) x√≥a IAM ROle nh·∫•n Roles. nh·∫•n Roles t√™ndata-streaming-system-role sau ƒë√≥ nh·∫•n Delete, tiep tuc nh·∫≠p t√™n v√† xo√≥ "
},
{
	"uri": "https://github.com/thinhnguyen501511.github.io/FCJ-WorkShop/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://github.com/thinhnguyen501511.github.io/FCJ-WorkShop/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://github.com/thinhnguyen501511.github.io/FCJ-WorkShop/vi/2-prerequiste/2.2-create-dynamo/",
	"title": "T·∫°o DynamoDB Table v√† B·∫≠t DynamoDB Stream",
	"tags": [],
	"description": "",
	"content": "T·∫°o DynamoDB ƒê·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu theo th·ªùi gian th·ª±c(real-time) trong h·ªá th·ªëng Serverless, ch√∫ng ta c·∫ßn m·ªôt c∆° ch·∫ø ƒë·ªÉ l·∫Øng nghe c√°c thay ƒë·ªïi x·∫£y ra trong c∆° s·ªü d·ªØ li·ªáu. DynamoDB Stream ch√≠nh l√† c√¥ng c·ª• h·ªó tr·ª£ cho m·ª•c ti√™u ƒë√≥. ·ªû b∆∞·ªõc n√†y, ch√∫ng ta s·∫Ω t·∫°o m·ªôt b·∫£ng DynamoDB ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu v√† b·∫≠t t√≠nh nƒÉng Stream, nh·∫±m cho ph√©p c√°c d·ªãch v·ª• nh∆∞ AWS Lambda t·ª± ƒë·ªông k√≠ch ho·∫°t m·ªói khi c√≥ thay ƒë·ªïi (th√™m, s·ª≠a, x√≥a) trong b·∫£ng.\nVi·ªác b·∫≠t DynamoDB Stream s·∫Ω gi√∫p b·∫°n x√¢y d·ª±ng m·ªôt lu·ªìng x·ª≠ l√Ω d·ªØ li·ªáu realtime m·∫°nh m·∫Ω, ch·∫≥ng h·∫°n nh∆∞ ghi log, ƒë·ªìng b·ªô d·ªØ li·ªáu, t√≠nh to√°n th·ªëng k√™ ho·∫∑c chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu sang h·ªá th·ªëng kh√°c. ƒê√¢y l√† n·ªÅn t·∫£ng quan tr·ªçng trong ki·∫øn tr√∫c h∆∞·ªõng s·ª± ki·ªán (event-driven architecture).\nƒêi t·ªõi DynamoDB Nh·∫•p v√†o DynamoDB. Nh·∫•p v√†o Tables, sau ƒë√≥ Nh·∫•p v√†o Create table Trong t·∫°o b·∫£ng: ƒê·∫∑t t√™n b·∫£ng OrdersTable ƒê·∫∑t t√™n Partition key : OrderID Ch·ªçn Customize settings Sau ƒë√≥ ch·ªçn Create table B·∫≠t DynamoDB Stream Nh·∫•p v√†o Table v·ª´a t·∫°o Ch·ªçn Exports and Streams T·∫°i DynamoDB stream details, Ch·ªçn Turn on Ch·ªçn New and old images\nNh·∫•p v√†o Turn on stream "
},
{
	"uri": "https://github.com/thinhnguyen501511.github.io/FCJ-WorkShop/vi/2-prerequiste/2.3-create-lambda/",
	"title": "T·∫°o Lambda v√† g·∫Øn v·ªõi DynamoDB Stream",
	"tags": [],
	"description": "",
	"content": "Sau khi ƒë√£ t·∫°o b·∫£ng DynamoDB v√† b·∫≠t ch·ª©c nƒÉng Stream, b∆∞·ªõc ti·∫øp theo l√† x√¢y d·ª±ng h√†m Lambda ƒë·ªÉ x·ª≠ l√Ω c√°c s·ª± ki·ªán ƒë∆∞·ª£c ghi nh·∫≠n t·ª´ Stream ƒë√≥. AWS Lambda cho ph√©p b·∫°n vi·∫øt m√£ th·ª±c thi ph·∫£n ·ª©ng ngay khi d·ªØ li·ªáu trong DynamoDB thay ƒë·ªïi ‚Äî ch·∫≥ng h·∫°n nh∆∞ khi c√≥ m·ªôt b·∫£n ghi m·ªõi ƒë∆∞·ª£c th√™m v√†o, b·ªã c·∫≠p nh·∫≠t, ho·∫∑c b·ªã x√≥a.\nTrong b∆∞·ªõc n√†y, ch√∫ng ta s·∫Ω t·∫°o m·ªôt h√†m Lambda s·ª≠ d·ª•ng ng√¥n ng·ªØ l·∫≠p tr√¨nh ph√π h·ª£p (v√≠ d·ª•: Python ho·∫∑c Node.js), sau ƒë√≥ c·∫•u h√¨nh ƒë·ªÉ h√†m n√†y ƒë∆∞·ª£c t·ª± ƒë·ªông k√≠ch ho·∫°t b·ªüi s·ª± ki·ªán t·ª´ DynamoDB Stream. Vi·ªác n√†y gi√∫p h·ªá th·ªëng c√≥ th·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu th·ªùi gian th·ª±c m√† kh√¥ng c·∫ßn qu·∫£n l√Ω m√°y ch·ªß, ƒë·ªìng th·ªùi d·ªÖ d√†ng m·ªü r·ªông khi l∆∞u l∆∞·ª£ng tƒÉng cao.\nL·ª£i √≠ch: X·ª≠ l√Ω th·ªùi gian th·ª±c: d·ªØ li·ªáu ƒë∆∞·ª£c c·∫≠p nh·∫≠t ho·∫∑c th√™m m·ªõi v√†o DynamoDB s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ngay l·∫≠p t·ª©c qua Lambda.\nKh√¥ng c·∫ßn qu·∫£n l√Ω h·∫° t·∫ßng: Lambda l√† d·ªãch v·ª• serverless n√™n b·∫°n kh√¥ng c·∫ßn v·∫≠n h√†nh m√°y ch·ªß n√†o.\nT√≠ch h·ª£p m∆∞·ª£t m√†: vi·ªác k·∫øt n·ªëi DynamoDB v√† Lambda qua Stream ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp b·ªüi AWS v·ªõi thao t√°c ƒë∆°n gi·∫£n.\nSau khi t·∫°o xong, b·∫°n c√≥ th·ªÉ vi·∫øt logic x·ª≠ l√Ω nh∆∞: g·ª≠i th√¥ng b√°o, ghi log, ƒë·ªìng b·ªô v·ªõi d·ªãch v·ª• kh√°c, ho·∫∑c th·ª±c hi·ªán c√°c nghi·ªáp v·ª• ƒë·∫∑c th√π.\nT·∫°o Lambda Function ƒêi t·ªõi T·∫°o Lambda Function Nh·∫•p v√†o Lambda. Nh·∫•p v√†o Create a function. Ch·ªçn : Ch·ªçn Author from scratch Function name: DynamoStreamProcessor Runtime: Node.js 22.x Ch·ªçn x86_64 Ch·ªçn Use an existing role \u0026gt; Ch·ªçn ƒë√∫ng LambdaDynamoDBStreamRole ƒë√£ t·∫°o tr∆∞·ªõc ƒë√≥ G·∫Øn DynamoDB Stream Trigger v√†o Lambda function Sau khi ƒë√£ t·∫°o xong h√†m Lambda v√† b·∫≠t DynamoDB Streams cho b·∫£ng d·ªØ li·ªáu, b∆∞·ªõc ti·∫øp theo l√† c·∫•u h√¨nh ƒë·ªÉ Lambda t·ª± ƒë·ªông ƒë∆∞·ª£c k√≠ch ho·∫°t (trigger) m·ªói khi b·∫£ng DynamoDB c√≥ thay ƒë·ªïi d·ªØ li·ªáu (th√™m, s·ª≠a, x√≥a).\nN·ªëi b·∫£ng DynamoDB ƒë√£ b·∫≠t Stream v·ªõi Lambda ƒë·ªÉ x·ª≠ l√Ω real-time data m·ªói khi c√≥ thay ƒë·ªïi tr√™n b·∫£ng. M·ªü Lambda Function v·ª´a t·∫°o: V√†o Lambda.\nCh·ªçn function v·ª´a t·∫°o t√™n: DynamoStreamProcessor. Ch·ªçn Add trigger Ch·ªçn d·ªãch v·ª•: DynamoDB Ch·ªçn:\nTable: OrdersTable (ho·∫∑c t√™n b·∫£ng b·∫°n ƒë√£ t·∫°o)\nBatch size: Gi·ªØ m·∫∑c ƒë·ªãnh 100\nStarting position: Ch·ªçn LATEST (ch·ªâ nh·∫≠n d·ªØ li·ªáu m·ªõi)\nSau ƒë√≥ ch·ªçn Add Sau khi ho√†n th√†nh: "
}]